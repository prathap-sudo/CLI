{
  "validationRules": [],
  "transactionType": "SOURCE TO TARGET CHILD",
  "tagKeys": "MANAGE_WORK_ORDER_-_REQUESTS_FROM_ESTIMATES;SFM166378430768043FA30F6312C25602308B2F319CB324F_DESC;THIS_RECORD_DOES_NOT_MEET_THE_QUALIFICATION_CRITERIA_FOR_THIS_SFM_TRANSACTION;PAG1663784455219AEEB9A5F8E7BFE1D6A903A3CE893DB0D_PAGEHELP;PARTS;WORK_ORDER;GET_PRICE;",
  "syncMobileOption": "Default",
  "status": "Complete",
  "sorting": [],
  "parentProcessNodes": [
    {
      "type": "TARGET",
      "sourceAPIName": "SVMXC__Service_Order__c",
      "referenceId": "a0Gf6000000EuWxEAK",
      "qualificationCriteriaId": "EXPR002",
      "objectLabel": "Work Order",
      "objectAPIName": "SVMXC__Service_Order__c",
      "enableOnlineSearch": false,
      "allowImages": false,
      "allowAttachments": false
    },
    {
      "type": "SOURCE",
      "referenceId": "a0Gf6000000EuX0EAK",
      "objectAPIName": "SVMXC__Service_Order__c",
      "enableOnlineSearch": false,
      "allowImages": false,
      "allowAttachments": false
    }
  ],
  "pageLayoutDetails": {
    "type": "Header",
    "showProductHistory": false,
    "showAllSections": false,
    "showAccountHistory": false,
    "pageHelp": "This SFM transaction is used to create Usage/Consumption lines from existing Estimate lines in a work order.",
    "pageHeader": {
      "sections": [
        {
          "type": "Section",
          "sequence": 1,
          "referenceId": "a0cf60000003pmZAAQ",
          "name": "Work Order",
          "hideSectionTitle": false,
          "elements": [
            {
              "type": "PICKLIST",
              "sequence": 1,
              "row": 1,
              "required": true,
              "readOnly": false,
              "overrideLookupContext": false,
              "lookupConfiguration": {},
              "isRichTextOnWeb": false,
              "events": [],
              "eltType": "Field",
              "column": 1,
              "apiName": "SVMXC__Order_Status__c",
              "allowNew": false
            }
          ],
          "columns": 2
        },
        {
          "type": "Button",
          "showinWeb": true,
          "showinIpad": true,
          "sequence": 1,
          "referenceId": "a0cf60000003pmaAAA",
          "name": "Get Price",
          "hideSectionTitle": false,
          "events": [
            {
              "type": "Button Click",
              "codeSnippetDetail": {
                "type": "JavaScript",
                "snippetId": "Code001",
                "name": "Standard Get Price",
                "description": "Standard Get Price",
                "data": "(function(){var tag = new Object();\ntag['TAG001'] = 'Price not calculated, because entitlement check has not been performed.';\ntag['TAG002'] = 'Part is not covered by contract.';\ntag['TAG003'] = 'Part is covered by warranty.';\ntag['TAG004'] = 'Labor is covered by contract.';\ntag['TAG005'] = 'Labor is not covered by contract.';\ntag['TAG006'] = 'Labor is covered by warranty';\ntag['TAG007'] = 'Expense is covered by contract.';\ntag['TAG008'] = 'Expense is not covered by contract.';\ntag['TAG009'] = 'Expense is covered by warranty.';\ntag['TAG010'] = 'Travel is covered by contract.';\ntag['TAG011'] = 'Travel is not covered by contract.';\ntag['TAG012'] = 'Travel is covered by warranty.';\ntag['TAG013'] = 'Parts price defined in contract.';\ntag['TAG014'] = 'Parts price defined in contract price book.';\ntag['TAG015'] = 'Parts price defined in standard price book.';\ntag['TAG016'] = 'Parts discount defined in contract.';\ntag['TAG017'] = 'Labor Price defined in contract.';\ntag['TAG018'] = 'Labor Price defined in contract price book.';\ntag['TAG019'] = 'Labor Price defined in standard price book.';\ntag['TAG020'] = 'Expense Price defined in contract.';\ntag['TAG021'] = 'Travel price defined in contract.';\ntag['TAG022'] = 'No expense price found for ';\ntag['TAG023'] = 'No travel price found';\ntag['TAG024'] = 'The price for this part could not be determined. Please verify that a price for this part has been set in the service contract or product price book.';\ntag['TAG025'] = 'The price for this labor entry cannot be determined. Please verify that a price for this activity has been set in the contract or service price book.';\ntag['TAG026'] = 'No warranty found.';\ntag['TAG027'] = 'No service offering found.';\ntag['TAG028'] = 'A special price is available for ';\ntag['TAG029'] = 'Part is covered by contract.';\ntag['TAG030'] = 'A special price is available for the PRODUCT: ';\nvar setting = new Object();\nvar recordTypeName = new Object();\nvar IBWarranty = new Object();\nvar PSEntitled = new Object();\nvar IBSconPartsPricing = new Object();\nvar IBSconPartsDiscount = new Object();\nvar IBSconLaborPricing = new Object();\nvar LinePartPriceBook = new Object();\nvar LineLaborPriceBook = new Object();\nvar IBSconDefinition = new Object();\nvar IBExpenseInfo = new Object();\nvar totalWorkOrderPrice = 0;\n\nfunction getQuantityField(record)\n{\n var recordTypeId = getItemForDetailRecordKey(\"RecordTypeId\", record);\n if(recordTypeName[recordTypeId.value] == 'Estimate') {\n  return 'Estimated_Quantity2__c';\n }\n if(recordTypeName[recordTypeId.value] == 'Usage/Consumption') {\n  return 'Actual_Quantity2__c';\n }\n}\nfunction getUnitPriceField(record)\n{\n var recordTypeId = getItemForDetailRecordKey(\"RecordTypeId\", record);\n if(recordTypeName[recordTypeId.value] == 'Estimate') {\n  return 'Estimated_Price2__c';\n }\n if(recordTypeName[recordTypeId.value] == 'Usage/Consumption') {\n  return 'Actual_Price2__c';\n }\n}\n\nfunction getTotalLinePriceField(record)\n{\n var recordTypeId = getItemForDetailRecordKey(\"RecordTypeId\", record);\n if(recordTypeName[recordTypeId.value] == 'Estimate') {\n  return 'Billable_Line_Price__c';\n }\n if(recordTypeName[recordTypeId.value] == 'Usage/Consumption') {\n  return 'Billable_Line_Price__c';\n }\n}\n\nfunction processPartLine(record, pb, recordType, params){\n var linePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n var discountField = getItemForDetailRecordKey(\"Discount__c\", record);\n var product = getItemForDetailRecordKey(\"Product__c\", record);\n var coverageField = getItemForDetailRecordKey(\"Covered__c\", record);\n var up = getUnitPriceForPart(product, pb, recordType, params);\n if(up.tag != null){\n  var appliedCoverage = {applied: false, isCovered: false};\n  var discount = 0;\n if(up.tag == 'TAG014' || up.tag == 'TAG015') {\n  discount = getPartDiscount(product, pb, params);\n }\n if(discount > 0) {\n  addLogWorkOrderLine(params.logField, tag['TAG016']);\n }\n  discountField.value = getOnlyPositiveValue(discount);  \n  if(!params.isLineEntitled)\n  {\n   coverageField.value = 0;\n   var customCoverage = getPartCustomCoverage(product, pb);\n   if (customCoverage) {\n     appliedCoverage = applyServiceOffering(coverageField, customCoverage, \"Parts_Discount_Covered__c\", \"Parts_Discount_Not_Covered__c\");\n   }\n   \n   if (!appliedCoverage.applied) {\n     appliedCoverage = applyServiceOffering(coverageField, params.so, \"Parts_Discount_Covered__c\", \"Parts_Discount_Not_Covered__c\");\n    }\n  }\n  if(!appliedCoverage.applied){\n   if(applyWarranty(coverageField, params, \"Material_Covered__c\")){\n      addLogWorkOrderLine(params.logField, tag['TAG003']);\n    }\n  }\n  else{\n   appliedCoverage.isCovered == true ? addLogWorkOrderLine(params.logField, tag['TAG029']) : addLogWorkOrderLine(params.logField, tag['TAG002']);\n  }\n  \n  addLogWorkOrderLine(params.logField, tag[up.tag]);\n \n  up = getOnlyPositiveValue(up.value);\n  unitPriceField.value = up;\n  params.quantity = (params.quantity).toFixed(3);\n  params.calculatedQuantityField.value = params.quantity;\n  var rate = params.quantity * up;\n  \n  var totalLinePrice = getBillableLinePrice(rate, discountField, coverageField);\n  linePriceField.value = totalLinePrice;\n  if(params.isBillable){\n   totalWorkOrderPrice += parseFloat(totalLinePrice);\n  }\n }\n else{\n  linePriceField.value = 0;\n  unitPriceField.value = 0;\n  coverageField.value = 0;\n  params.calculatedQuantityField.value = 0;\n  addLogWorkOrderLine(params.logField, tag['TAG024']);\n  return;\n }\n}\n\nfunction getUnitPriceForPart(product, pb, recordType, params){\n var ret = new Object(); \n ret.value = -1;\n ret.tag = null;\n /* Check if a special pricing is available as part of service contract */\n ret.value = getUnitPriceFromPartsSpecialPricing(product, pb, params);\n  \n if(ret.value != -1)ret.tag = 'TAG013';\n \n if(ret.value == -1){\n  /* Check if a service contract exists. Assumption is that if no contract is available, then this item will NOT be available */\n  var recordTypeKey = 'RECORDTYPEINFO_PARTS_CONTRACT';\n  /*if(recordTypeInfo)\n    pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo);    */\n    ret.value = getUnitPriceFromPartsPricing(recordTypeKey, pb, product, params, recordType);\n    if(ret.value != -1)ret.tag = 'TAG014';\n }\n /* No price book is available for this record type under service contract, switch to basic calculation */\n\t\n if(ret.value == -1){\n   ret.value = getBasicUnitPriceForPart(product, pb, recordType, params);\n   if(ret.value != -1)ret.tag = 'TAG015';\n }\n \n if(ret.value == -1) ret.value = 0;\n \n return ret;\n}\n  \nfunction getBasicUnitPriceForPart(product, pb, recordType, params){\n var recordTypeKey = 'RECORDTYPEINFO_PARTS', ret = -1; \n  ret = getUnitPriceFromPartsPricing(recordTypeKey, pb, product, params,recordType);\n return ret;\n}\n\nfunction getUnitPriceFromPartsSpecialPricing(product, pb, params){\n var specialPricing;\n var detailLineId = params.detailLineId;\n if(!params.isLineEntitled){\n    specialPricing = getFromPriceBookDefinition(pb, \"CONTRACT_SPECIALPARTSPRICING\");\n }else{\n    if(IBSconPartsPricing && IBSconPartsPricing[detailLineId]){\n      specialPricing = new Object();\n      specialPricing.data = [];\n      for(var i in IBSconPartsPricing[detailLineId]){\n        specialPricing.data.push(IBSconPartsPricing[detailLineId][i]);\n      }\n    }  \n }\n\n var ret = -1;\n if(specialPricing){\n  var allSpecialPricing = specialPricing.data, l = allSpecialPricing.length;\n  for(var i = 0; i < l; i++){\n   if( allSpecialPricing[i][getQualifiedFieldName(\"Product__c\")] == product.value){\n    ret = allSpecialPricing[i][getQualifiedFieldName(\"Price_Per_Unit__c\")];\n    addLogWorkOrderLine(params.logField, tag['TAG030'] + product.value1 + '.');\n    break;\n   }\n  }\n }\n return ret;\n}\n\n/**\n * @returns price if a matching pricebook is found, -1 otherwise\n */\nfunction getUnitPriceFromPartsPricing(recordTypeKey, pb, product, params, recordType){\n  var partsPricingInfo, detailLineId = params.detailLineId, pbKey ,ret = -1;\n  var recordTypeInfo = getFromPriceBookDefinition(pb, recordTypeKey);\n  if(recordTypeInfo)\n    pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo); \n  partsPricingInfo = getFromPriceBookDefinition(pb, \"PARTSPRICING\"); \n  if(params.isLineEntitled){\n    if(recordTypeKey == 'RECORDTYPEINFO_PARTS_CONTRACT'){\n      recordTypeKey = 'RECORDTYPEINFO_PARTS';\n      partsPricingInfo = null;\n      if(LinePartPriceBook && LinePartPriceBook[detailLineId] ){\n        pbKey = null;\n        partsPricingInfo = new Object();\n        partsPricingInfo.data = [];\n        partsPricingInfo.data = LinePartPriceBook[detailLineId];\n      }\n    }    \n  }   \n  \n  if(partsPricingInfo){ \n    var allProductsInfo = partsPricingInfo.data, l = allProductsInfo.length, i;\n    for(i = 0; i < l; i++){\n     if(((recordTypeKey != 'RECORDTYPEINFO_PARTS_CONTRACT' && pbKey == null ) || \n      (pbKey != null && pbKey == allProductsInfo[i].Pricebook2Id)) && allProductsInfo[i].Product2Id == product.value){\n      ret = allProductsInfo[i].UnitPrice;\n      break;\n     }\n    }\n  }\n return ret;\n}\n\nfunction getPartDiscount(product, pb,params){\n var discountDefinitionInfo;\n var prodDefinition = getProductDefinition(pb, product), ret = null;\n var detailLineId = params.detailLineId;\n if(prodDefinition){\n  if(!params.isLineEntitled){\n    discountDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_PARTSDISCOUNT\");\n  }else{\n    if(IBSconPartsDiscount && IBSconPartsDiscount[detailLineId]){\n      discountDefinitionInfo = new Object();\n      discountDefinitionInfo.data = [];\n      for(var i in IBSconPartsDiscount[detailLineId]){\n        discountDefinitionInfo.data.push(IBSconPartsDiscount[detailLineId][i]);\n      }      \n    }     \n  } \n  if(discountDefinitionInfo){\n   var allDiscountDefinitionInfo = discountDefinitionInfo.data, j, dlength = allDiscountDefinitionInfo.length, bfound = true;\n   for(j = 0; j < dlength; j++){\n    bfound = false;\n    var discountDefinition = allDiscountDefinitionInfo[j];\n    if(discountDefinition[getQualifiedFieldName(\"Product__c\")] == prodDefinition['Id']){\n     bfound = true;\n    }else if(prodDefinition[getQualifiedFieldName(\"Product_Line__c\")] && discountDefinition[getQualifiedFieldName(\"Product_Line__c\")] == prodDefinition[getQualifiedFieldName(\"Product_Line__c\")]){\n     bfound = true;\n    }else if(prodDefinition[\"Family\"] && discountDefinition[getQualifiedFieldName(\"Product_Family__c\")] == prodDefinition[\"Family\"]){\n     bfound = true;\n    }\n    \n    if(bfound){\n     ret = discountDefinition[getQualifiedFieldName(\"Discount_Percentage__c\")];\n     break;\n    }\n   }\n  }\n }\n return ret;\n}\n\nfunction getPartCustomCoverage(product, pb){\n \n var prodDefinition = getProductDefinition(pb, product), ret = null;\n \n if(prodDefinition){\n  var customCoverageInfo = getFromPriceBookDefinition(pb, \"CONTRACT_CUSTOMCOVERAGE\");\n  if(customCoverageInfo){\n   var customCoverages = customCoverageInfo.data, j, dlength = customCoverages.length, bfound = false;\n   var productTypeField = getQualifiedFieldName(\"Product_Type__c\");\n   for(j = 0; j < dlength; j++){\n    var customCoverage = customCoverages[j];\n    if(customCoverage[productTypeField] == prodDefinition[productTypeField]){\n     bfound = true;\n    }\n    \n    if(bfound){\n     ret = customCoverage;\n     ret.isCovered = (customCoverageInfo.value == \"COVERED\") ? true : false;\n     break;\n    }\n   }\n  }\n }\n return ret;\n}\n/*///////////////////////////////////////////////// END - PARTS FUNCTIONS ////////////////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - LABOR FUNCTIONS //////////////////////////////////////////*/\nfunction processLaborLine( record, pb, recordType, params){\n var linePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n var activityType = getItemForDetailRecordKey(\"Activity_Type__c\", record);\n var coverageField = getItemForDetailRecordKey(\"Covered__c\", record);\n var unitType = getItemForDetailRecordKey(\"Applied_Rate_Type__c\", record);\n var product = getItemForDetailRecordKey(\"Product__c\", record);\n var discountField = getItemForDetailRecordKey(\"Discount__c\", record);\n var up;\n \n if(setting[\"WORD005_SET019\"] === \"Product price book\"){\n  up = getPriceForLaborAsParts(product, pb, recordType, params);\n  \n var discount = 0;\n if(up.tag == 'TAG014' || up.tag == 'TAG015') {\n  discount = getPartDiscount(product, pb, params);\n }\n if(discount > 0) {\n  addLogWorkOrderLine(params.logField, tag['TAG016']);\n }\n discountField.value = getOnlyPositiveValue(discount);\n\n }\n else{\n  up = getUnitPriceForLabor(activityType, pb, recordType, record, params);\n }\n \n if(up.tag != null){\n  var appliedCoverage = {applied: false, isCovered: false};\n  coverageField.value = 0;\n  if(!params.isLineEntitled)\n  {\n   appliedCoverage = applyServiceOffering(coverageField, params.so, \"Labor_Discount_Covered__c\", \"Labor_Discount_Not_Covered__c\");\n  }\n  if(!appliedCoverage.applied){\n   if(applyWarranty(coverageField, params, \"Time_Covered__c\"))\n    addLogWorkOrderLine(params.logField, tag['TAG006']);\n  }\n  else{\n   appliedCoverage.isCovered == true ? addLogWorkOrderLine(params.logField, tag['TAG004']) : addLogWorkOrderLine(params.logField, tag['TAG005']);\n  }\n  addLogWorkOrderLine(params.logField, tag[up.tag]);\n  up = up.value;\n  var rateType = up.rateType, rate = 0, duration, estimateDuration;\n  var regularRate = up.regularRate;\n  if(!up.regularRate) regularRate = 0;\n  var laborRoundingType;\n  var laborToRoundNearest;\n  var scMinimumLabor;\n  var contractDefinitionInfo;\n  if(rateType == \"Per Hour\"){\n    if(!params.isLineEntitled){\n      contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n    }else{\n      var detailLineId = params.detailLineId;\n      if(IBSconDefinition && IBSconDefinition[detailLineId]){\n        contractDefinitionInfo = new Object();\n        contractDefinitionInfo.data = [];\n        contractDefinitionInfo.data.push(IBSconDefinition[detailLineId]);\n      }\n    }      \n   if(contractDefinitionInfo){\n    contractDefinition = contractDefinitionInfo.data[0];\n    laborRoundingType = contractDefinition[getQualifiedFieldName(\"Labor_Rounding_Type__c\")];\n    laborToRoundNearest = contractDefinition[getQualifiedFieldName(\"Round_Labor_To_Nearest__c\")];\n    scMinimumLabor = contractDefinition[getQualifiedFieldName(\"Minimum_Labor__c\")];\n   }\n   var minDuration = up.minimumUnit ? up.minimumUnit : scMinimumLabor;\n   estimateDuration = getDuration(record,true);\n   \n   if(estimateDuration < 0){\n    estimateDuration = params.quantity * 60;\n   }\n\n   if(laborRoundingType && laborToRoundNearest)\n   {\n    estimateDuration = getRounded(laborRoundingType,laborToRoundNearest,estimateDuration);\n   }\n   \n   duration = (minDuration > estimateDuration) ? minDuration  : estimateDuration;\n   duration = (duration / 60).toFixed(3);\n   rate = duration * (regularRate );\n   params.calculatedQuantityField.value = duration;\n  }else{\n   /* Flat rate*/\n   rate = regularRate;\n   params.calculatedQuantityField.value = 1;\n  }\n \n  unitPriceField.value = regularRate;\n  /* Added to support both discount and coverage for Labor line based on Global setting */\n  var totalLinePrice = (!!discountField) ? getBillableLinePrice(rate, discountField, coverageField) : getBillableLinePrice(rate, null, coverageField);\n  linePriceField.value = totalLinePrice;\n  if(params.isBillable)\n   totalWorkOrderPrice += parseFloat(totalLinePrice);\n  unitType.value = rateType;\n }\n else{\n  linePriceField.value = 0;\n  unitPriceField.value = 0;\n  coverageField.value = 0;\n  params.calculatedQuantityField.value = 0;\n  addLogWorkOrderLine(params.logField, tag['TAG025'] + activityType.value);\n  return;\n }\n}\n\nfunction getPriceForLaborAsParts(product, pb, recordType, params){\n\n var up = new Object();\n var rate = getUnitPriceForPart(product, pb, recordType, params);\n up.tag = rate.tag;\n up.value = {\n  rateType    : \"Per Hour\",\n  regularRate : rate.value,\n  minimumUnit : null,\n };\n return up;\n}\n\nfunction getUnitPriceForLabor(activityType, pb, recordType, record, params){\n var ret = new Object(); \n ret.value = null;\n ret.tag = null;\n \n /* Check if a special pricing is available as part of service contract */\n ret.value  = getUnitPriceFromLaborSpecialPricing(activityType, pb, record, params);\n  \n if(ret.value  != null) ret.tag = 'TAG017';\n if(ret.value  == null){\n \n  /* Check if a service contract exists. Assumption is that if no contract is available, then this item will NOT be available */\n  var recordTypeKey = 'RECORDTYPEINFO_LABOR_CONTRACT'; \n   ret.value  = getUnitPriceFromLaborPricing(recordTypeKey, pb, activityType, record, params,recordType);\n   if(ret.value  != null) ret.tag = 'TAG018';\n }\n\t\n /* Get the price book corresponding to record type and do the basic calculation */\n if(ret.value  == null){\n  ret.value  = getBasicUnitPriceForLabor(activityType, pb, recordType, record, params);\n  if(ret.value  != null) ret.tag = 'TAG019';\n }\n \n return ret;\n}\n  \nfunction getBasicUnitPriceForLabor(activityType, pb, recordType, record, params){\n var recordTypeKey = 'RECORDTYPEINFO_LABOR', ret = null;\n  ret = getUnitPriceFromLaborPricing(recordTypeKey, pb, activityType, record, params,recordType);\n return ret;\n}\n\nfunction getUnitPriceFromLaborSpecialPricing(activityType, pb, record, params){\n var detailLineId = params.detailLineId; \n var specialPricing ;\n  if(!params.isLineEntitled){\n    specialPricing = getFromPriceBookDefinition(pb, \"CONTRACT_SPECIALLABORPRICING\");\n  }else{\n    if(IBSconLaborPricing && IBSconLaborPricing[detailLineId]){\n      specialPricing = new Object();\n      specialPricing.data = [];\n      for(var i in IBSconLaborPricing[detailLineId]){\n        specialPricing.data.push(IBSconLaborPricing[detailLineId][i]);\n      }        \n    }\n  }  \n var ret = null;\n if(specialPricing){\n  var allSpecialPricing = specialPricing.data, l = allSpecialPricing.length, defaultPricing;\n  for(var i = 0; i < l; i++){\n   var pricing = allSpecialPricing[i];\n   if( pricing[getQualifiedFieldName(\"Activity_Type__c\")] == activityType.value){\n    \n    ret = extractLaborPricing(pricing, record, pb, \"Minimum_Labor__c\");\n    if(ret){\n     defaultPricing = ret;\n     if(ret.found) break;\n    }else{\n     ret = defaultPricing;\n    }\n   }\n  }\n }\n \n if(ret) addLogWorkOrderLine(params.logField, tag['TAG028'] + activityType.value);\n \n return ret;\n}\n\nfunction getUnitPriceFromLaborPricing(recordTypeKey, pb, activityType, record, params,recordType){\n var pbKey;\n var laborPricingInfo, ret = null; \n var detailLineId = params.detailLineId; \n var recordTypeInfo = getFromPriceBookDefinition(pb, recordTypeKey);  \n if(recordTypeInfo)\n  pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo);\n laborPricingInfo = getFromPriceBookDefinition(pb, \"LABORPRICING\");\n if(params.isLineEntitled){\n  if(recordTypeKey == 'RECORDTYPEINFO_LABOR_CONTRACT'){\n    recordTypeKey = 'RECORDTYPEINFO_LABOR';\n    laborPricingInfo = null;\n    if(LineLaborPriceBook && LineLaborPriceBook[detailLineId]){\n     pbKey = null;\n     laborPricingInfo = new Object();\n     laborPricingInfo.data = [];\n     laborPricingInfo.data = LineLaborPriceBook[detailLineId];\n   }\n  }\n }\n \n if(laborPricingInfo){\n /* Get the price book corresponding to the product type */\n  var allLaborPricingInfo = laborPricingInfo.data, l = allLaborPricingInfo.length, i, defaultPricing;\n  for(i = 0; i < l; i++){\n   var pricing = allLaborPricingInfo[i];\n   if(((recordTypeKey != 'RECORDTYPEINFO_LABOR_CONTRACT' && pbKey == null ) || \n    (pbKey != null && pbKey == pricing[getQualifiedFieldName(\"Price_Book__c\")])) && pricing[getQualifiedFieldName(\"Activity_Type__c\")] == activityType.value){\n    ret = extractLaborPricing(pricing, record, pb);\n    if(ret){\n     defaultPricing = ret;\n     if(ret.found) break;\n    }else{\n     ret = defaultPricing;\n    }\n   }\n  }\n }\n \n return ret;\n}\n\nfunction extractLaborPricing(pricing, record, pb, minLaborField){\n\n var isAssociatedWithProduct = !!pricing[getQualifiedFieldName(\"Activity_Product__c\")], ret = null;\n var product = getItemForDetailRecordKey(\"Product__c\", record);\n if(!product || !product.value || product.value == \"\") product = woProduct;\n if(isAssociatedWithProduct && product && product.value && product.value != \"\"){\n  var prodDefinition = getProductDefinition(pb, product), bfound = false;\n  if(!prodDefinition) return;\n  if((get15CharId(pricing[getQualifiedFieldName(\"Product__c\")]) == get15CharId(product.value))){\n   bfound = true;\n  }else if(prodDefinition[getQualifiedFieldName(\"Product_Line__c\")] && pricing[getQualifiedFieldName(\"Product_Line__c\")] == prodDefinition[getQualifiedFieldName(\"Product_Line__c\")]){\n   bfound = true;\n  }else if(prodDefinition[\"Family\"] && pricing[getQualifiedFieldName(\"Product_Family__c\")] == prodDefinition[\"Family\"]){\n   bfound = true;\n  }\n  if(bfound){\n   ret = {\n     rateType    : pricing[getQualifiedFieldName(\"Unit__c\")],\n     regularRate : pricing[getQualifiedFieldName(\"Regular_Rate__c\")],\n     minimumUnit : minLaborField != null ? pricing[getQualifiedFieldName(minLaborField)] : null,\n     found : true\n   };\n  }\n }else{\n  ret = {\n    rateType    : pricing[getQualifiedFieldName(\"Unit__c\")],\n    regularRate : pricing[getQualifiedFieldName(\"Regular_Rate__c\")],\n    minimumUnit : minLaborField != null ? pricing[getQualifiedFieldName(minLaborField)] : null\n  };\n  if(!product) ret.found = true;\n }\n return ret;\n}\n\n/*///////////////////////////////////////////////// END - LABOR FUNCTIONS ////////////////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - EXPENSE FUNCTIONS ////////////////////////////////////////*/\nfunction processExpenseLine(record, pb, params){\n var expenseType = getItemForDetailRecordKey(\"Expense_Type__c\", record);\n var linePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n var coverageField = getItemForDetailRecordKey(\"Covered__c\", record);\n var discountField = getItemForDetailRecordKey(\"Discount__c\", record);//057441\n \n if(expenseType != \"\" && expenseType.value != null && expenseType.value != \"\"){\n  var expenseInfo = null, expenseDetail = null;\n  \n  if(!params.isLineEntitled){\n   expenseInfo = getFromPriceBookDefinition(pb, \"CONTRACT_EXPENSE\"), expenseDetail = null;\n  }else{\n    var detailLineId = params.detailLineId;\n    if(IBExpenseInfo && IBExpenseInfo[detailLineId]){\n      expenseInfo = new Object();\n      expenseInfo.data = [];\n      for(var i in IBExpenseInfo[detailLineId]){\n        expenseInfo.data.push(IBExpenseInfo[detailLineId][i]);\n      }      \n    }\n  }\n    \n  /* Covered by service contract */\n  if(expenseInfo){\n   var allExpensesInfo = expenseInfo.data, l = allExpensesInfo.length;\n   for(var i = 0; i < l; i++){\n    if( allExpensesInfo[i][getQualifiedFieldName(\"Expense_Type__c\")] == expenseType.value){\n     expenseDetail = allExpensesInfo[i];\n     break;\n    }\n   }\n   \n   if(expenseDetail != null){\n    coverageField.value = 0;\n    var appliedCoverage = applyServiceOffering(coverageField, params.so, \"Expense_Discount_Covered__c\", \"Expense_Discount_Not_Covered__c\");\n    if(!appliedCoverage.applied){\n     /*Warranty coverage should not be considered*/\n    }\n    else{\n     appliedCoverage.isCovered == true ? addLogWorkOrderLine(params.logField, tag['TAG007']) : addLogWorkOrderLine(params.logField, tag['TAG008']);\n    } \n    \n    addLogWorkOrderLine(params.logField, tag['TAG020']);\n    var totalLinePrice = 0;\n    params.quantity = (params.quantity).toFixed(3);\n    var rate = expenseDetail[getQualifiedFieldName(\"Rate__c\")];\n    var rateType = expenseDetail[getQualifiedFieldName(\"Rate_Type__c\")];\n    var unitType = getItemForDetailRecordKey(\"Applied_Rate_Type__c\", record);\n    if(rate !== undefined && rate !== null && typeof(rate) === \"string\") rate = parseFloat(rate);\n    if(rateType == \"Per Unit\"){\n     unitPriceField.value = rate;\n     totalLinePrice = params.quantity * rate;\n    }else if(rateType == \"Flat Rate\"){\n     totalLinePrice = rate;\n     params.calculatedQuantityField.value = 1;\n     unitPriceField.value = rate;\n    }else if(rateType == \"Markup %\"){\n     if(unitPriceField.value && unitPriceField.value != null && unitPriceField.value > 0)\n      totalLinePrice = unitPriceField.value * ((100 + rate) / 100) * params.quantity;\n    }else if(rateType == \"Actuals\"){\n     if(unitPriceField.value && unitPriceField.value != null && unitPriceField.value > 0)\n      totalLinePrice = unitPriceField.value * params.quantity;\n    }else if(rateType == \"Discount %\"){\n     if(unitPriceField.value && unitPriceField.value != null && unitPriceField.value > 0)\n      totalLinePrice = unitPriceField.value * ((100 - rate) / 100) * params.quantity;\n      discountField.value = rate;//057441\n    }\n    totalLinePrice = getBillableLinePrice(totalLinePrice, null, coverageField);\n    linePriceField.value = totalLinePrice;\n    if(params.isBillable)\n     totalWorkOrderPrice += parseFloat(totalLinePrice);\n    unitType.value = rateType;\n    params.calculatedQuantityField.value = params.quantity;\n   }\n   else{\n    linePriceField.value = 0;\n    unitPriceField.value = 0;\n    coverageField.value = 0;\n    params.calculatedQuantityField.value = 0;\n    addLogWorkOrderLine(params.logField, tag['TAG022'] + expenseType.value);\n    return;\n   }\n  }\n  /* Covered by warranty */\n  else if(applyWarranty(coverageField, params, \"Expenses_Covered__c\")){\n   addLogWorkOrderLine(params.logField, tag['TAG009']);\n   totalLinePrice = 0;\n   params.quantity = (params.quantity).toFixed(3);\n   totalLinePrice = params.quantity * unitPriceField.value;\n   totalLinePrice = getBillableLinePrice(totalLinePrice, null, coverageField);\n   linePriceField.value = totalLinePrice;\n   if(params.isBillable)\n    totalWorkOrderPrice += parseFloat(totalLinePrice);\n   params.calculatedQuantityField.value = params.quantity;\n  }\n  else{\n    linePriceField.value = 0;\n    unitPriceField.value = 0;\n    coverageField.value = 0;\n    params.calculatedQuantityField.value = 0;\n    addLogWorkOrderLine(params.logField, tag['TAG022'] + expenseType.value);\n    return;\n  }\n }\n}\n/*///////////////////////////////////////////////// END - EXPENSE FUNCTIONS //////////////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - TRAVEL FUNCTIONS ////////////////////////////////////////*/\nfunction processTravelLine(record, pb, params){\n var linePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n var unitType = getItemForDetailRecordKey(\"Applied_Rate_Type__c\", record);\n var coverageField = getItemForDetailRecordKey(\"Covered__c\", record);\n\n var appliedTravelPolicy = null, regularRate = 0;\n appliedTravelPolicy = params.appliedTravelPolicy;\n if(!params.isLineEntitled && appliedTravelPolicy){\n  addLogWorkOrderLine(params.logField, tag['TAG021']);\n  var unit = appliedTravelPolicy[getQualifiedFieldName(\"Unit__c\")];\n  var rate = 0, i, l;\n  var travelRoundingType;\n  var travelToRoundNearest;\n  var travel;\n  var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n  if(contractDefinitionInfo){\n   contractDefinition = contractDefinitionInfo.data[0];\n   travelRoundingType = contractDefinition[getQualifiedFieldName(\"Travel_Rounding_Type__c\")];\n   travelToRoundNearest = contractDefinition[getQualifiedFieldName(\"Round_Travel_To_Nearest__c\")];\n   scMinimumTravel = contractDefinition[getQualifiedFieldName(\"Minimum_Travel__c\")];\n  }\n \n  if(unit == \"Tiered Per Mile/Km\"){\n   clearTravelLine(record, pb, params);\n   var mileageTiersInfo = getFromPriceBookDefinition(pb, \"CONTRACT_MILEAGETIERS\");\n   if(mileageTiersInfo){\n    var allMileageTiers = mileageTiersInfo.data, l = allMileageTiers.length;\n    for(i = 0; i < l; i++){\n     var mileageTier = allMileageTiers[i], min = mileageTier[getQualifiedFieldName(\"Minimum__c\")], \n        max = mileageTier[getQualifiedFieldName(\"Maximum__c\")];\n     \n     if(min == undefined || max == undefined) continue;\n     \n     var mtEstimate = params.quantity;  \n     \n     if(mtEstimate >= min && mtEstimate <= max){\n      var mtRateType = mileageTier[getQualifiedFieldName(\"Unit__c\")];\n      var mtRate = mileageTier[getQualifiedFieldName(\"Rate__c\")];\n      \n      if(mtRateType == \"Flat Rate\"){\n       regularRate = mtRate;\n       rate = mtRate;\n       params.calculatedQuantityField.value = 1;\n      }else{\n       \n       regularRate = mtRate;\n       mtEstimate = (mtEstimate).toFixed(3);\n       params.calculatedQuantityField.value = mtEstimate;\n       rate = mtEstimate * mtRate;\n      }\n      break;\n     }\n     \n    }\n   }\n   if(coverageField.value == null) coverageField.value = 0;\n  }else if(unit == \"Per Hour\"){\n   regularRate = appliedTravelPolicy[getQualifiedFieldName(\"Rate__c\")];\n   var estimatedDuration = getDuration(record,true);\n   \n   if(estimatedDuration < 0){\n    estimatedDuration = params.quantity * 60;\n   }\n   if(travelRoundingType && travelToRoundNearest){\n    estimatedDuration = getRounded(travelRoundingType,travelToRoundNearest,estimatedDuration);\n   }\n   var minDuration = scMinimumTravel > estimatedDuration ? scMinimumTravel : estimatedDuration;\n   minDuration = (minDuration / 60).toFixed(3);\n   params.calculatedQuantityField.value = minDuration;  \n   rate = minDuration * (regularRate);\n   if(coverageField.value == null) coverageField.value = 0;\n  }else if(unit == \"Zone Based\"){\n   var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n   if(contractDefinitionInfo){\n    contractDefinition = contractDefinitionInfo.data[0],zone = contractDefinition[getQualifiedFieldName(\"Zone__c\")];\n    var zonePriceInfo = getFromPriceBookDefinition(pb, \"CONTRACT_ZONEPRICING\");\n    if(zonePriceInfo){\n     var allzonePricing = zonePriceInfo.data, l = allzonePricing.length;\n     for(i = 0; i < l; i++){\n      var zonePricing = allzonePricing[i], zoneFromZonePricing = zonePricing[getQualifiedFieldName(\"Zone__c\")];\n      if(zoneFromZonePricing == zone){\n       /* Apply flat rate */\n       rate = zonePricing[getQualifiedFieldName(\"Rate__c\")];\n       regularRate = rate;\n       params.calculatedQuantityField.value = 1;\n       break;\n      }\n     }\n    }\n   }\n   if(coverageField.value == null) coverageField.value = 0;\n  }\n  else{\n   linePriceField.value = 0;\n   unitPriceField.value = 0;\n   coverageField.value = 0;\n   params.calculatedQuantityField.value = 0;\n   addLogWorkOrderLine(params.logField, tag['TAG023']);\n   $EXPR.Logger.warn(tag['TAG023']);\n   return;\n  }\n }\n \nvar appliedCoverage = {applied: false, isCovered: false};\n if(regularRate > 0 &&  !params.isLineEntitled){\n  appliedCoverage = applyServiceOffering(coverageField, params.so, \"Travel_Discount_Covered__c\", \"Travel_Discount_Not_Covered__c\");\n  if(!appliedCoverage.applied){\n   if(applyWarranty(coverageField, params, \"Travel_Covered__c\"))\n    addLogWorkOrderLine(params.logField, tag['TAG012']);\n  }\n  else{\n   appliedCoverage.isCovered == true ? addLogWorkOrderLine(params.logField, tag['TAG010']) : addLogWorkOrderLine(params.logField, tag['TAG011']);\n  } \n \n  unitPriceField.value = regularRate;\n  var totalLinePrice = getBillableLinePrice(rate, null, coverageField);\n  linePriceField.value = totalLinePrice;\n  if(params.isBillable)\n   totalWorkOrderPrice += parseFloat(totalLinePrice);\n  unitType.value = unit;\n }\n /* Covered by warranty */\n else if(params.warranty){\n /* ----Start------056319 fix----  */\t\n  if (!appliedCoverage.applied) {\t\n    if (applyWarranty(coverageField, params, \"Travel_Covered__c\"))\t\n      addLogWorkOrderLine(params.logField, tag['TAG012']);\t\n  } else {\t\n    appliedCoverage.isCovered == true\t\n      ? addLogWorkOrderLine(params.logField, tag['TAG010'])\t\n      : addLogWorkOrderLine(params.logField, tag['TAG011']);\t\n  }\t\n  /* ----End------056319 fix---- */\n  var totalLinePrice = 0;\n  var travelDuration = getDuration(record,true);\n  if(travelDuration < 0){\n   travelDuration = params.quantity * 60;\n  }\n  params.quantity = (travelDuration / 60).toFixed(3);\n  totalLinePrice = params.quantity * unitPriceField.value;\n  totalLinePrice = getBillableLinePrice(totalLinePrice, null, coverageField); /* ----Added this line for 056319 fix---- */\n  linePriceField.value = totalLinePrice;\n  if(params.isBillable)\n   totalWorkOrderPrice += parseFloat(totalLinePrice);\n  params.calculatedQuantityField.value = params.quantity;\n }\n}"
              },
              "actionType": "JAVASCRIPT"
            }
          ]
        },
        {
          "type": "Detail",
          "sequence": 1,
          "referenceId": "a0df6000000D5kuAAC",
          "objectAlias": "Parts",
          "name": "Parts",
          "columns": 1,
          "childAPIName": "SVMXC__Service_Order_Line__c",
          "allowZeroLines": "Allow"
        }
      ],
      "objectAPIName": "SVMXC__Service_Order__c"
    },
    "objectAPIName": "SVMXC__Service_Order__c",
    "name": "Copy of Manage WO Estimate Lines",
    "lines": [
      {
        "sequence": 1,
        "referenceId": "a0df6000000D5kuAAC",
        "objectAlias": "Parts",
        "name": "Parts",
        "multiAddObject": "Product2",
        "multiAddField": "SVMXC__Product__c",
        "hideEmptySection": false,
        "events": [],
        "elements": [
          {
            "type": "REFERENCE",
            "sequence": 1,
            "row": 1,
            "required": true,
            "referenceTo": "Product2",
            "referenceNameField": "Name",
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupContextSource": "CURRENT_RECORD",
            "lookupConfiguration": {
              "name": "SVMXSTD: Product Lookup",
              "isStandard": true,
              "description": "Pre-configured standard lookup for Product object",
              "lookupObject": "Product2",
              "lookupFilter": {
                "sourceObject": "Product2",
                "expressionsList": [
                  {
                    "sourceField": "Name",
                    "sequence": 1,
                    "contextType": "Search",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "Name",
                    "sequence": 1,
                    "contextType": "Result",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "Name",
                    "sequence": 1,
                    "contextType": "Bubble",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "ProductCode",
                    "sequence": 2,
                    "contextType": "Search",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "ProductCode",
                    "sequence": 2,
                    "contextType": "Bubble",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "ProductCode",
                    "sequence": 2,
                    "contextType": "Result",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "Family",
                    "sequence": 3,
                    "contextType": "Result",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "Family",
                    "sequence": 3,
                    "contextType": "Bubble",
                    "actionType": "Set Value"
                  },
                  {
                    "sourceField": "Family",
                    "sequence": 3,
                    "contextType": "Search",
                    "actionType": "Set Value"
                  }
                ],
                "defaultOn": false,
                "allowOverride": false
              },
              "lkpRecords": 10,
              "isDefault": true,
              "defaultColumn": "Name",
              "advancedFilters": [
                {
                  "name": "SVMXSTD:Limit Items to My Trunk Stock",
                  "description": "Limit Items to My Trunk Stock",
                  "targetNode": "SVMXC__Product__c",
                  "sourceObject": "SVMXC__Product_Stock__c",
                  "expressionsList": [
                    {
                      "value": "Available",
                      "sourceField": "SVMXC__Status__c",
                      "sequence": 1,
                      "parameterType": "Value",
                      "operator": "eq",
                      "operand": "Available",
                      "actionType": "Set Value"
                    },
                    {
                      "value": "0",
                      "sourceField": "SVMXC__Available_Qty__c",
                      "sequence": 2,
                      "parameterType": "Value",
                      "operator": "gt",
                      "operand": "0",
                      "actionType": "Set Value"
                    },
                    {
                      "value": "User Trunk",
                      "sourceField": "SVMXC__Location__c",
                      "sequence": 3,
                      "parameterType": "Constant",
                      "operator": "eq",
                      "operand": "User Trunk",
                      "actionType": "Set Value"
                    }
                  ],
                  "defaultOn": false,
                  "allowOverride": true
                }
              ]
            },
            "lookupConfigName": "SVMXSTD: Product Lookup",
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 1,
            "apiName": "SVMXC__Product__c",
            "allowNew": false
          },
          {
            "type": "DOUBLE",
            "sequence": 2,
            "row": 2,
            "required": true,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 1,
            "apiName": "SVMXC__Actual_Quantity2__c",
            "allowNew": false
          },
          {
            "type": "REFERENCE",
            "sequence": 3,
            "row": 3,
            "required": false,
            "referenceTo": "SVMXC__Site__c",
            "referenceNameField": "Name",
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupContextSource": "CURRENT_RECORD",
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 1,
            "apiName": "SVMXC__Requested_Location__c",
            "allowNew": false
          }
        ],
        "columns": 1,
        "childAPIName": "SVMXC__Service_Order_Line__c",
        "allowZeroLines": "Allow",
        "allowNew": true,
        "allowDelete": true,
        "allowClone": true
      }
    ],
    "isStandard": false,
    "includeSummary": false,
    "includeEventTimePlace": false,
    "includeContact": false,
    "hideSave": false,
    "hideQuickSave": true,
    "helpUrl": "http://userdocs.servicemax.com:8080/ServiceMaxHelp/Summer11/en_us/svmx_redirector.htm?uid=APP19_11",
    "events": [],
    "enableTroubleShooting": false,
    "enableServiceReportView": false,
    "enableServiceReportGeneration": false,
    "dependencyExist": true
  },
  "name": "Manage Work Order - Requests from Estimates",
  "linkedProcesses": [],
  "isStandard": false,
  "formulas": [],
  "events": [],
  "enableRealTimeValidation": true,
  "developerName": "SFM166378430768043fa30f6312c25602308b2f319cb324f",
  "description": "Create Part Requests from Estimates",
  "childProcessNodes": [
    {
      "type": "SOURCECHILD",
      "sequence": 1,
      "referenceId": "a0Gf6000000EuWwEAK",
      "parentColumnAPIName": "SVMXC__Service_Order__c",
      "objectAPIName": "SVMXC__Service_Order_Line__c",
      "nodeAPIName": "SVMXC__Service_Order__c",
      "enableOnlineSearch": false,
      "allowImages": false,
      "allowAttachments": false
    },
    {
      "valueMappingName": "SVMXSTD: Create Usage Lines (Parts)",
      "valueMappingDeveloperName": "MAP031V",
      "type": "TARGETCHILD",
      "sourceAPIName": "SVMXC__Service_Order_Line__c",
      "sequence": 1,
      "referenceId": "a0Gf6000000EuWyEAK",
      "qualificationCriteriaId": "SVMXSTD:_Parts_Estimate_Lines_Only_RTText",
      "parentColumnAPIName": "SVMXC__Service_Order__c",
      "objectLabel": "Parts",
      "objectAPIName": "SVMXC__Service_Order_Line__c",
      "nodeAPIName": "SVMXC__Service_Order__c",
      "mappingId": "MAP16637847562120e2079614c2358dcd51d26dd0808c521",
      "fieldMappingName": "DEMO - WO Estimate Lines to Request Lines",
      "enableOnlineSearch": false,
      "allowImages": false,
      "allowAttachments": false
    }
  ],
  "attachmentEnabled": false
}