{
  "validationRules": [],
  "transactionType": "STANDALONE EDIT",
  "tagKeys": "ADD/EDIT_TIME;CREATE_CASE_TIME_TRACKER_ENTRY_DESC;CASE_TIME_TRACKER_PAGEHELP;ACTIVITY;CASE;GET_PRICE;THIS_RECORD_DOES_NOT_MEET_THE_QUALIFICATION_CRITERIA_FOR_THIS_SFM_TRANSACTION;",
  "syncMobileOption": "Default",
  "status": "Complete",
  "sorting": [],
  "parentProcessNodes": [
    {
      "type": "TARGET",
      "referenceId": "a0Gf6000000EunNEAS",
      "objectLabel": "Case",
      "objectAPIName": "Case",
      "enableOnlineSearch": false,
      "allowImages": false,
      "allowAttachments": false
    }
  ],
  "pageLayoutDetails": {
    "type": "Header",
    "showProductHistory": false,
    "showAllSections": true,
    "showAccountHistory": false,
    "pageHelp": "This SFM transaction is used to create or edit Activity (Labor) lines in Case.",
    "pageHeader": {
      "sections": [
        {
          "type": "Button",
          "showinWeb": true,
          "showinIpad": false,
          "referenceId": "a0cf60000003qGNAAY",
          "name": "Get Price",
          "hideSectionTitle": false,
          "events": [
            {
              "type": "Button Click",
              "codeSnippetDetail": {
                "type": "JavaScript",
                "snippetId": "Code005",
                "name": "Case GetPrice",
                "description": "Case GetPrice",
                "data": "(function(){var tag = new Object();\n\ntag['TAG004'] = 'Activity is covered by contract.';\ntag['TAG005'] = 'Activity is not covered by contract.';\ntag['TAG006'] = 'Activity is covered by warranty';\ntag['TAG017'] = 'Labor Price defined in contract.';\ntag['TAG018'] = 'Labor Price defined in contract price book.';\ntag['TAG019'] = 'Labor Price defined in standard price book.';\ntag['TAG025'] = 'No activity price found for ';\ntag['TAG026'] = 'No warranty found.';\ntag['TAG027'] = 'No service offering found.';\ntag['TAG028'] = 'A special price is available for ';\nvar recordTypeName = new Object();\nvar totalWorkOrderPrice = 0;\n\nfunction getQuantityField(record)\n{\n return 'Line_Qty__c';\n}\nfunction getUnitPriceField(record)\n{\n return 'Line_Price__c';\n}\n\nfunction getTotalLinePriceField(record)\n{\n return 'Billable_Line_Price__c';\n}\n\n/*///////////////////////////////////////////////// START - LABOR FUNCTIONS //////////////////////////////////////////*/\nfunction processLaborLine( record, pb, recordType, params){\n var linePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n var activityType = getItemForDetailRecordKey(\"Activity_Type__c\", record);\n var coverageField = getItemForDetailRecordKey(\"Covered__c\", record);\n\n var up = getUnitPriceForLabor(activityType, pb, recordType, record);\n var unitType = getItemForDetailRecordKey(\"Applied_Rate_Type__c\", record);\n\n if(up.tag != null){\n  coverageField.value = 0;\n  var appliedCoverage = applyServiceOffering(coverageField, params.so, \"Labor_Discount_Covered__c\", \"Labor_Discount_Not_Covered__c\");\n  if(!appliedCoverage.applied){\n   if(applyWarranty(coverageField, params.warranty, \"Time_Covered__c\"))\n    addLogWorkOrderLine(params.logField, tag['TAG006']);\n  }\n  else{\n   appliedCoverage.isCovered == true ? addLogWorkOrderLine(params.logField, tag['TAG004']) : addLogWorkOrderLine(params.logField, tag['TAG005']);\n  }\n  addLogWorkOrderLine(params.logField, tag[up.tag]);\n  up = up.value;\n  var rateType = up.rateType, rate = 0, duration, estimateDuration;\n  var regularRate = up.regularRate;\n  if(!up.regularRate) regularRate = 0;\n  var laborRoundingType;\n  var laborToRoundNearest;\n  var scMinimumLabor;\n  if(rateType == \"Per Hour\"){\n   var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n   if(contractDefinitionInfo){\n    contractDefinition = contractDefinitionInfo.data[0];\n    laborRoundingType = contractDefinition[getQualifiedFieldName(\"Labor_Rounding_Type__c\")];\n    laborToRoundNearest = contractDefinition[getQualifiedFieldName(\"Round_Labor_To_Nearest__c\")];\n    scMinimumLabor = contractDefinition[getQualifiedFieldName(\"Minimum_Labor__c\")];\n   }\n   var minDuration = up.minimumUnit ? up.minimumUnit : scMinimumLabor;\n   estimateDuration = getDuration(record,true);\n\n   if(estimateDuration < 0){\n    estimateDuration = params.quantity * 60;\n   }\n\n   if(laborRoundingType && laborToRoundNearest)\n   {\n    estimateDuration = getRounded(laborRoundingType,laborToRoundNearest,estimateDuration);\n   }\n   estimateDuration = estimateDuration;\n   duration = (minDuration > estimateDuration) ? minDuration  : estimateDuration;\n   duration = (duration / 60).toFixed(3);\n   rate = duration * (regularRate );\n   params.calculatedQuantityField.value = duration;\n  }else{\n   /* Flat rate*/\n   rate = regularRate;\n   params.calculatedQuantityField.value = 1;\n  }\n\n  unitPriceField.value = regularRate;\n  var totalLinePrice = getBillableLinePrice(rate, null, coverageField);\n  linePriceField.value = totalLinePrice;\n  if(params.isBillable)\n   totalWorkOrderPrice += parseFloat(totalLinePrice);\n  unitType.value = rateType;\n }\n else{\n  linePriceField.value = 0;\n  unitPriceField.value = 0;\n  coverageField.value = 0;\n  params.calculatedQuantityField.value = 0;\n  $EXPR.Logger.warn(tag['TAG025'] + activityType.value);\n  return;\n }\n}\n\nfunction getUnitPriceForLabor(activityType, pb, recordType, record){\n var ret = new Object(), pbKey = null;\n ret.value = null;\n ret.tag = null;\n\n /* Check if a special pricing is available as part of service contract */\n ret.value  = getUnitPriceFromLaborSpecialPricing(activityType, pb, record);\n if(ret.value  != null) ret.tag = 'TAG017';\n if(ret.value  == null){\n\n  /* Check if a service contract exists. Assumption is that if no contract is available, then this item will NOT be available */\n  var recordTypeInfo = getFromPriceBookDefinition(pb, \"RECORDTYPEINFO_ACTIVITY_CONTRACT\");\n  if(recordTypeInfo){\n   pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo);\n\n   if(pbKey){\n    ret.value  = getUnitPriceFromLaborPricing(pbKey, pb, activityType, record);\n    if(ret.value  != null) ret.tag = 'TAG018';\n   }\n  }\n }\n\n\n /* Get the price book corresponding to record type and do the basic calculation */\n if(ret.value  == null){\n  ret.value  = getBasicUnitPriceForLabor(activityType, pb, recordType, record);\n  if(ret.value  != null) ret.tag = 'TAG019';\n }\n\n return ret;\n}\n\nfunction getBasicUnitPriceForLabor(activityType, pb, recordType, record){\n var recordTypeInfo = getFromPriceBookDefinition(pb, \"RECORDTYPEINFO_ACTIVITY\"), ret = null, pbKey = null;\n if(recordTypeInfo){\n  pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo);\n }\n\n if(pbKey){\n  ret = getUnitPriceFromLaborPricing(pbKey, pb, activityType, record);\n }\n return ret;\n}\n\nfunction getUnitPriceFromLaborSpecialPricing(activityType, pb, record){\n var specialPricing = getFromPriceBookDefinition(pb, \"CONTRACT_SPECIALACTIVITYPRICING\");\n var ret = null;\n if(specialPricing){\n  var allSpecialPricing = specialPricing.data, l = allSpecialPricing.length, i, defaultPricing;\n  for(i = 0; i < l; i++){\n   var pricing = allSpecialPricing[i];\n   if( pricing[getQualifiedFieldName(\"Activity_Type__c\")] == activityType.value){\n\n    ret = extractLaborPricing(pricing, record, pb, \"Minimum_Labor__c\");\n    if(ret){\n     defaultPricing = ret;\n     if(ret.found) break;\n    }else{\n     ret = defaultPricing;\n    }\n   }\n  }\n }\n\n if(ret) $EXPR.Logger.info(tag['TAG028'] + activityType.value);\n\n return ret;\n}\n\nfunction getUnitPriceFromLaborPricing(pbKey, pb, activityType, record){\n\n var laborPricingInfo = getFromPriceBookDefinition(pb, \"ACTIVITYPRICING\"), ret = null;\n if(laborPricingInfo){\n /* Get the price book corresponding to the product type */\n  var allLaborPricingInfo = laborPricingInfo.data, l = allLaborPricingInfo.length, i, defaultPricing;\n  for(i = 0; i < l; i++){\n   var pricing = allLaborPricingInfo[i];\n   if(pbKey == pricing[getQualifiedFieldName(\"Price_Book__c\")]\n     && pricing[getQualifiedFieldName(\"Activity_Type__c\")] == activityType.value){\n\n    ret = extractLaborPricing(pricing, record, pb);\n    if(ret){\n     defaultPricing = ret;\n     if(ret.found) break;\n    }else{\n     ret = defaultPricing;\n    }\n   }\n  }\n }\n\n return ret;\n}\n\nfunction extractLaborPricing(pricing, record, pb, minLaborField){\n\n var isAssociatedWithProduct = !!pricing[getQualifiedFieldName(\"Activity_Product__c\")], ret = null;\n var product = getItemForDetailRecordKey(\"Product__c\", record);\n if(!product || !product.value || product.value == \"\") product = woProduct;\n if(isAssociatedWithProduct && product && product.value && product.value != \"\"){\n  var prodDefinition = getProductDefinition(pb, product), bfound = false;\n  if(!prodDefinition) return;\n  if((get15CharId(pricing[getQualifiedFieldName(\"Product__c\")]) == get15CharId(product.value))){\n   bfound = true;\n  }else if(prodDefinition[getQualifiedFieldName(\"Product_Line__c\")] && pricing[getQualifiedFieldName(\"Product_Line__c\")] == prodDefinition[getQualifiedFieldName(\"Product_Line__c\")]){\n   bfound = true;\n  }else if(prodDefinition[\"Family\"] && pricing[getQualifiedFieldName(\"Product_Family__c\")] == prodDefinition[\"Family\"]){\n   bfound = true;\n  }\n  if(bfound){\n   ret = {\n     rateType    : pricing[getQualifiedFieldName(\"Unit__c\")],\n     regularRate : pricing[getQualifiedFieldName(\"Regular_Rate__c\")],\n     minimumUnit : minLaborField != null ? pricing[getQualifiedFieldName(minLaborField)] : null,\n     found : true\n   };\n  }\n }else{\n  ret = {\n    rateType    : pricing[getQualifiedFieldName(\"Unit__c\")],\n    regularRate : pricing[getQualifiedFieldName(\"Regular_Rate__c\")],\n    minimumUnit : minLaborField != null ? pricing[getQualifiedFieldName(minLaborField)] : null,\n  };\n  if(!product) ret.found = true;\n }\n return ret;\n}\n\n/*///////////////////////////////////////////////// END - LABOR FUNCTIONS ////////////////////////////////////////////*/\n\nfunction getDuration(lineItem, inMinutes){\n var startDateTime = null, endDateTime = null;\n var startDate = getItemForDetailRecordKey(\"Start_Date_and_Time__c\", lineItem);\n var endDate = getItemForDetailRecordKey(\"End_Date_and_Time__c\", lineItem);\n var duration = -1;\n\n if(startDate == null || startDate.value == null || startDate.value == \"\"\n  || endDate == null || endDate.value == null || endDate.value == \"\"){\n  duration = -1;\n }else{\n\n  /* Calculate time */\n  startDateTime = getDateFromString(startDate.value);\n  endDateTime = getDateFromString(endDate.value);\n  var diff = (endDateTime - startDateTime) / (1000.0 * 60.0);\n\n  if(!inMinutes){\n   diff /= 60.0;\n   /* Assumed to be in hours */\n   diff = Math.ceil(diff);\n  }\n  if(diff > 0){\n   duration = Math.round(diff*100)/100 ;\n  }\n }\n return duration;\n}\n\nfunction applyWarranty(coverageField, warranty, wField){\n if(warranty){\n  var coverage = warranty[getQualifiedFieldName(wField)];\n  coverageField.value =  getOnlyPositiveValue(coverage);\n  return true;\n }\n else {\n  $EXPR.Logger.info(tag['TAG026']);\n    }\n}\n\nfunction applyServiceOffering(coverageField, so, coveredField, notCoveredField){\n var response = new Object(), coverage = null, fld = null;\n response.isCovered = false;\n response.applied = false;\n if(so){\n  if(so.isCovered){\n   fld = coveredField;\n   response.isCovered = true;\n  }else{\n   fld = notCoveredField;\n  }\n\n  coverage = so[getQualifiedFieldName(fld)];\n  coverageField.value = getOnlyPositiveValue(coverage);\n  response.applied = true;\n }else {\n  $EXPR.Logger.info(tag['TAG027']);\n    }\n\n return response;\n}\n\nfunction addLogWorkOrderLine(logField, logMessage){\n logField.value += logMessage + '';\n $EXPR.Logger.info(logMessage);\n}\n\nfunction getOnlyPositiveValue(value){\n if(value == null || value < 0) {\n  return 0;\n    }\n else {\n  return value;\n    }\n}\n\nfunction getPriceBookIdForRecordType(recordType, recordTypeInfo){\n var rtype2PriceBookMap = recordTypeInfo.valueMap, l = rtype2PriceBookMap.length, i, pbKey = null;\n for(i = 0; i < l; i++){\n  var rtype2PriceBook = rtype2PriceBookMap[i];\n  if(rtype2PriceBook.key == recordType.value){\n   pbKey = rtype2PriceBook.value;\n   break;\n  }\n }\n return pbKey;\n}\n\nfunction getFromPriceBookDefinition(pb, key){\n var i, l = pb.length, ret = null;\n for(i = 0; i < l; i++){\n  if(pb[i].key == key){\n   ret = pb[i];\n   break;\n  }\n }\n return ret;\n}\n\nfunction getWarrantyDefinition(pb){\n var wDef = getFromPriceBookDefinition(pb, \"WARRANTYDEFINITION\"), ret = null;\n if(wDef) ret = wDef.data[0];\n\n return ret;\n}\n\nfunction getServiceOffering(pb){\n var so = getFromPriceBookDefinition(pb, \"CONTRACT_SERVICEOFFERING\"), ret = null;\n if(so) {\n  ret = so.data[0];\n  ret.isCovered = (so.value == \"COVERED\") ? true : false;\n }\n return ret;\n}\n\nfunction getItemForDetailRecordKey(key, record){\n\n\n key = getFieldAPI(key);\n\n var length = record.length, k, ret = \"\";\n for(k = 0; k < length; k++){\n  var fld = record[k];\n  if(fld.key == key){\n   ret = fld;\n   break;\n  }\n }\n return ret;\n}\n\nfunction getFieldAPI(key)\n{\n if(key.indexOf(\"__c\", key.length - \"__c\".length) !== -1){\n  key = $EXPR.getOrgNamespace() + \"__\" + key;\n }\n return key;\n}\n\nfunction getQualifiedFieldName(name){\n return $EXPR.getOrgNamespace() + \"__\" + name;\n}\n\nfunction getDateFromString(dateStr){\n var dt = dateStr.split(\" \");\n var date = dt[0].split(\"-\");\n var time = dt[1].split(\":\");\n return new Date(parseInt(date[0], 10), parseInt(date[1], 10), parseInt(date[2], 10),\n   parseInt(time[0], 10), parseInt(time[1], 10), parseInt(time[2], 10));\n}\n\n\n/* Hack to get around mixed ID lengths */\nfunction get15CharId(id){\n if(id && id.length == 18) {\n  id = id.substring(0, 15);\n    }\n\n return id;\n}\n\nfunction formatAdvancedExpression(){\n if(arguments.length == 0 ) { return \"\";}\n\n var formatted = arguments[0];\n\n    for (var i = 0; i < arguments[1].length; i++) {\n     formatted = formatted.split( \"\" + (i+1) ).join(arguments[1][i]);\n    }\n    return formatted;\n}\n\nfunction getProductDefinition(pb, product){\n var prodDefinitionInfo = getFromPriceBookDefinition(pb, \"PRODUCT_DEFINITION\"), ret = null;\n if(prodDefinitionInfo){\n  var allProdDefinitionInfo = prodDefinitionInfo.data, i, l = allProdDefinitionInfo.length;\n  for(i = 0; i < l; i++){\n   if(allProdDefinitionInfo[i].Id == product.value){\n    ret = allProdDefinitionInfo[i];\n    break;\n   }\n  }\n }\n return ret;\n}\n\nfunction executeExpression(expression, wo){\n\n var expressionLines = expression.data, j, elength = expressionLines.length, exp = [], input = [];\n expressionLines = $SORT(expressionLines,getQualifiedFieldName(\"Sequence__c\"));\n for(j = 0; j < elength; j++){\n  var expressionLine = expressionLines[j];\n  var field = expressionLine[getQualifiedFieldName(\"Field_Name__c\")];\n  var operator = expressionLine[getQualifiedFieldName(\"Operator__c\")];\n  var operand = expressionLine[getQualifiedFieldName(\"Operand__c\")];\n\n  input[j] = {field : field, value : operand};\n  if(operator == \"starts\"){\n   exp[j] = $FORMAT(\"$STARTS_WITH({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"contains\"){\n   exp[j] = $FORMAT(\"$CONTAINS({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"eq\"){\n   exp[j] = $FORMAT(\"$EQUALS({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"ne\"){\n   exp[j] = $FORMAT(\"$NOT_EQUALS({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"gt\"){\n   exp[j] = $FORMAT(\"$GREATER_THAN({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"ge\"){\n   exp[j] = $FORMAT(\"$GREATER_THAN_OR_EQUAL_TO({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"lt\"){\n   exp[j] = $FORMAT(\"$LESS_THAN({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"le\"){\n   exp[j] = $FORMAT(\"$LESS_THAN_OR_EQUAL_TO({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"isnotnull\"){\n   exp[j] = $FORMAT(\"$IS_NOT_NULL({0})\", \"input[\" + j + \"]\");\n  }\n }\n\n var advancedExpression = expression.value;\n if(!advancedExpression || advancedExpression == null){\n  advancedExpression = \"( \";\n  for(k = 0; k < exp.length; k++){\n   advancedExpression += (k+1) + \" AND \";\n  }\n\n\n  /* Remove the last AND */\n  advancedExpression = advancedExpression.substring(0, advancedExpression.length - 4);\n  advancedExpression += \" )\";\n }\n\n\n /* Replace apex conditional operators with JS operators */\n advancedExpression = advancedExpression.toUpperCase();\n advancedExpression = advancedExpression.split(\"AND\").join(\"&&\").split(\"OR\").join(\"||\");\n var jsExpression = formatAdvancedExpression(advancedExpression, exp);\n\n\n /* Evaluate the expression */\n var result = true;\n (function(jsExpression, wo){\n\n  function $EQUALS(ip){\n     if(wo[ip.field] == ip.value) {\n    return true;\n     }\n     else {\n    return false;\n     }\n  }\n\n  function $STARTS_WITH(ip){\n   var field = wo[ip.field];\n   if(!field) field = \"\";\n\n   return field.indexOf(ip.value) == 0;\n  }\n\n  function $CONTAINS(ip){\n   var field = wo[ip.field];\n   if(!field) field = \"\";\n\n   return field.indexOf(ip.value) != -1;\n  }\n\n\n  function $NOT_EQUALS(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field != value);\n  }\n\n  function $GREATER_THAN(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field > value);\n  }\n\n  function $GREATER_THAN_OR_EQUAL_TO(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field >= value);\n  }\n\n  function $LESS_THAN(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field < value);\n  }\n\n  function $LESS_THAN(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field <= value);\n  }\n\n  function $IS_NOT_NULL(ip){\n   var field = wo[ip.field];\n   return !!field;\n  }\n\n  function convertTargetToSourceType(source, target){\n   var ret = target, sourceType = typeof(source);\n   if(sourceType == 'string') ret = \"\" + ret;\n   else if(sourceType == 'boolean') ret = !!ret;\n   else if(sourceType == 'number') ret = parseInt(ret, 10);\n\n   return ret;\n  }\n  result = eval(jsExpression);\n })(jsExpression, wo);\n\n return result;\n}\n\nfunction getExpression(expressionId, pb){\n var ret = null;\n if(expressionId){\n  var expressionsInfo = getFromPriceBookDefinition(pb, \"RULES\"), allExpressions = expressionsInfo.valueMap, l = allExpressions.length, i;\n  for(i = 0; i < l; i++){\n   var expression = allExpressions[i];\n   if(get15CharId(expression.key) == get15CharId(expressionId)){\n    ret = expression;\n    break;\n   }\n  }\n }\n return ret;\n}\n\nfunction getMasterCase(context, pb){\n var workOrder = getFromPriceBookDefinition(pb, \"CASE_DATA\").data[0];\n\n var woFromTransaction = context.headerRecord.records[0].targetRecordAsKeyValue;\n\n var lookupDef = getFromPriceBookDefinition(pb, \"LOOKUP_DEFINITION\").valueMap;\n\n var wo = mergeWO(workOrder, woFromTransaction, lookupDef);\n return wo;\n}\n\nfunction mergeWO(workOrder, woFromTransaction, lookupDef){\n /* Reference fields */\n var i, l = lookupDef.length;\n for(i = 0; i < l; i++){\n  var def = lookupDef[i];\n  workOrder[def.key] = def.value;\n }\n\n\n /* Merge transaction into wo data from server */\n l = woFromTransaction.length;\n for(i = 0; i < l; i++){\n  var value = woFromTransaction[i].value1;\n  if(!value) { value = woFromTransaction[i].value;}\n\n  workOrder[woFromTransaction[i].key] = value;\n }\n\n return workOrder;\n}\n\nfunction getRounded(roundType,mins,actuals){\n var roundingMins = actuals % 60;\n var remainingMins = actuals - (actuals % 60);\n var intMins = parseInt(mins);\n if(roundType == 'Round Up') {\n  if(intMins != 60 && (Math.ceil(roundingMins/intMins) * intMins) != 60)\n   return (remainingMins + (Math.ceil(roundingMins/intMins) * intMins % 60));\n  else\n   return (remainingMins + (Math.ceil(roundingMins/intMins) * intMins));\n }else if(roundType == 'Round Down') {\n  if(intMins != 60 && (Math.floor(roundingMins/intMins) * intMins) != 60)\n   return (remainingMins + (Math.floor(roundingMins/intMins) * intMins % 60));\n  else\n   return (remainingMins + (Math.floor(roundingMins/intMins) * intMins));\n }\n return actuals;\n}\n/*///////////////////////////////////////////////// END - UTILITY FUNCTIONS ////////////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - PRICING RULE FUNCTIONS /////////////////////////////////*/\nfunction getPricingRuleInfo(pb){\n var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\"), ret  = null, pricingRuleInfo = null;\n if(contractDefinitionInfo){\n  pricingRuleInfo = getFromPriceBookDefinition(pb, \"CONTRACT_PRICINGRULES\");\n  if(pricingRuleInfo && pricingRuleInfo.data.length > 0){\n   ret = pricingRuleInfo.data;\n  }\n }\n return ret;\n}\n\nfunction executePricingRules(pricingRuleInfo, pb, wo){\n var i, l = pricingRuleInfo.length, appliedPricingRule = null;\n for(i = 0; i < l; i++){\n  var pricingRule = pricingRuleInfo[i];\n  var expressionId = pricingRule[getQualifiedFieldName(\"Named_Expression__c\")];\n  var expression = getExpression(expressionId, pb);\n  if(!expression){\n   appliedPricingRule = pricingRule;\n   break;\n  }else{\n   var result = executeExpression(expression, wo);\n\n   if(result == true){\n    appliedPricingRule = pricingRule;\n    break;\n   }\n  }\n }\n return appliedPricingRule;\n}\n/*///////////////////////////////////////////////// END - PRICING RULE FUNCTIONS ///////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - UTILITY TO FIND TOTAL LINE PRICE ///////////////////////*/\nfunction getBillableLinePrice(totalLinePrice, discountField, coverageField)\n{\n var discount = 0;\n var response = 0;\n if(totalLinePrice != null)\n {\n  if(discountField != null && discountField.value != null && discountField.value > 0)\n   discount= (totalLinePrice * discountField.value / 100);\n  var coverage = 0;\n  totalLinePrice = totalLinePrice - discount;\n  if(coverageField != null && coverageField.value != null && coverageField.value > 0)\n   coverage = (totalLinePrice * coverageField.value / 100);\n\n  response = (totalLinePrice - coverage).toFixed(3);\n }\n return getOnlyPositiveValue(response);\n}\n/*///////////////////////////////////////////////// END - UTILITY TO FIND TOTAL LINE PRICE /////////////////////////*/\n\n/*///////////////////////////////////////////////// START - UTILITY TO UPDATE WORKORDER FUNCTIONS //////////////////*/\nfunction updateTransactionWORateInfo(context, rateSource, rateTarget, unitSource, unitTarget, rateInfo){\n var rateApplied = false, unitApplied = false, woFromTransaction = context.headerRecord.records[0].targetRecordAsKeyValue;\n for(var m = 0;  (m < woFromTransaction.length) && (rateApplied == false || unitApplied == false); m++){\n  if(woFromTransaction[m].key == getQualifiedFieldName(rateTarget)){\n   woFromTransaction[m].value = rateInfo[getQualifiedFieldName(rateSource)];\n   woFromTransaction[m].value1 = rateInfo[getQualifiedFieldName(rateSource)];\n   rateApplied = true;\n  }else if(woFromTransaction[m].key == getQualifiedFieldName(unitTarget)){\n   woFromTransaction[m].value = rateInfo[getQualifiedFieldName(unitSource)];\n   woFromTransaction[m].value1 = rateInfo[getQualifiedFieldName(unitSource)];\n   unitApplied = true;\n  }\n }\n if(!rateApplied){\n  woFromTransaction[woFromTransaction.length] = {key : getQualifiedFieldName(rateTarget),\n  value : rateInfo[getQualifiedFieldName(rateSource)], value1 : rateInfo[getQualifiedFieldName(rateSource)]};\n }\n if(!unitApplied){\n  woFromTransaction[woFromTransaction.length] = {key : getQualifiedFieldName(unitTarget),\n  value : rateInfo[getQualifiedFieldName(unitSource)], value1 : rateInfo[getQualifiedFieldName(unitSource)]};\n }\n}\n\nfunction tagHandler(pb){\n var tagDefinition = getFromPriceBookDefinition(pb, \"TAGS\");\n if(tagDefinition.valueMap != null){\n  var l = tagDefinition.valueMap.length;\n  for(i = 0; i < l; i++){\n   var tagDef = tagDefinition.valueMap[i];\n   tag[tagDef.key] = tagDef.value;\n  }\n }\n}\n\n/*///////////////////////////////////////////////// END - UTILITY TO UPDATE WORKORDER FUNCTIONS ///////////////////*/\nfunction applyPriceBook(context, pb){\n\n /* Load all tags */\n    tagHandler(pb);\n /* Check if entitlement has been performed\n var isEntitlementPerfromed = getItemForDetailRecordKey('Is_Entitlement_Performed__c', context.headerRecord.records[0].targetRecordAsKeyValue);\n\n if(isEntitlementPerfromed.value == null || isEntitlementPerfromed.value == 'false' || isEntitlementPerfromed.value == false)\n {\n  $EXPR.Logger.error(tag['EVER005_TAG087']);\n\n  if($EXPR.showMessage){\n   $EXPR.showMessage({\n    text : tag['EVER005_TAG087'],\n    type : 'WARN',\n    buttons :  ['OK'],\n    handler : function(evt){\n     $RETURN(context);\n    }\n   });\n   return false;\n  }else{\n   alert(tag['EVER005_TAG087']);\n   return true;\n  }\n }else{*/\n\n  return continueApplyPriceBook(context, pb);\n //}\n}\nfunction showAlert(data){\n     alert(JSON.stringify((data)));\n}\nfunction continueApplyPriceBook(context, pb){\n /* Check whether the work order has a tarvel policy */\n processWorkOrderLines = true;\n\n var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n\n /* Check whether the work order has a pricing rule */\n var pricingRuleInfo = getPricingRuleInfo(pb);\n\n\n var wo = getMasterCase(context, pb);\n\n var woContext = context.headerRecord.records[0].targetRecordAsKeyValue;\n\n if(pricingRuleInfo){\n  var appliedPricingRule = executePricingRules(pricingRuleInfo, pb, wo);\n  if(wo.SVMXC__Proforma_Invoice_Amount__c == null)\n   wo.SVMXC__Proforma_Invoice_Amount__c = 0;\n  var woTotal = getItemForDetailRecordKey('Proforma_Invoice_Amount__c', woContext);\n  if(woTotal == null | woTotal == '' )\n  {\n   woContext[woContext.length] = {key : 'SVMXC__Proforma_Invoice_Amount__c' ,value : 0, value1 : 0};\n   woTotal = woContext[woContext.length];\n  }\n  if(appliedPricingRule){\n   updateTransactionWORateInfo(context, \"Rate__c\", \"Rate_Pricing_Rule__c\", \"Rate_Type__c\", \"Rate_Type_Pricing_Rule__c\", appliedPricingRule);\n\n   var unit = appliedPricingRule[getQualifiedFieldName(\"Rate_Type__c\")];\n   if(unit == \"Fixed\"){\n    woTotal.value = appliedPricingRule[getFieldAPI(\"Rate__c\")];\n    processWorkOrderLines = false;\n   }\n  }\n }\n else{\n  var appliedPricingRule = {SVMXC__Rate_Type__c: \"\", SVMXC__Rate__c: 0};\n  updateTransactionWORateInfo(context, \"Rate__c\", \"Rate_Pricing_Rule__c\", \"Rate_Type__c\", \"Rate_Type_Pricing_Rule__c\", appliedPricingRule);\n\n }\n\n if(!processWorkOrderLines) return true;\n\n /*var recordTypeInfo = getFromPriceBookDefinition(pb, \"RECORDTYPEDEFINITION\");\n\n var i, l = recordTypeInfo.valueMap.length;\n for(var i = 0; i < l; i++){\n  var recordType = recordTypeInfo.valueMap[i];\n  recordTypeName[recordType.value] = recordType.key;\n }*/\n\n woProduct = getItemForDetailRecordKey(\"Product__c\", context.headerRecord.records[0].targetRecordAsKeyValue);\n\n detailRecords = context.detailRecords, l = detailRecords.length;\n var warranty = getWarrantyDefinition(pb);\n var so = getServiceOffering(pb);\n for(var i = 0; i < l; i++){\n  var records = detailRecords[i].records, j, recordslength = records.length;\n  for(j = 0; j < recordslength; j++){\n   var record = records[j].targetRecordAsKeyValue, length = record.length, k;\n   if(getQuantityField(record) == null) continue;\n   /* Do not process if the line item has this value set to true */\n   var usePriceBook = getItemForDetailRecordKey(\"Calculate_Price__c\", record);\n   var isBillable = getItemForDetailRecordKey(\"Is_Billable__c\", record);\n   if(!isBillable || !isBillable.value || isBillable.value == 'false' || isBillable.value == false){\n    isBillable = false;\n   }\n   else{\n    isBillable = true;\n   }\n   /* Calculate the quantity */\n   var quantityField = getItemForDetailRecordKey(getQuantityField(record), record);\n   var calculatedQuantityField = getItemForDetailRecordKey('Billable_Qty__c', record);\n   var totalLinePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n   var quantity = 0;\n   try{\n    quantity = parseFloat(quantityField.value);\n    if( isNaN(quantity) ) quantity = 0;\n   } catch(e){ }\n   /*end quantity*/\n\n   if(usePriceBook != \"\" && (usePriceBook.value != \"true\" && usePriceBook.value != true))\n   {\n    var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n    var totalLinePrice = 0;\n    if(unitPriceField.value)\n     totalLinePrice = parseInt(unitPriceField.value) * quantity;\n    totalWorkOrderPrice += totalLinePrice;\n    calculatedQuantityField.value = quantity;\n    totalLinePriceField.value = totalLinePrice;\n    continue;\n   }\n\n   var lineType = getItemForDetailRecordKey(\"Type__c\", record);\n   //var recordType = getItemForDetailRecordKey(\"RecordTypeId\", record);\n\n   var logField = getItemForDetailRecordKey('Billing_Information__c', record);\n   logField.value = '';\n   var recordTypeValue = {};\n   recordTypeValue.value = \"MASTER\";\n   if (lineType.value == \"Activity\"){\n    processLaborLine(record, pb, recordTypeValue, {quantity : quantity, warranty : warranty, quantityField : quantityField, so : so, calculatedQuantityField: calculatedQuantityField, logField : logField, isBillable: isBillable});\n   }\n\n   if(!isBillable){\n    if(calculatedQuantityField == null || calculatedQuantityField == \"\")\n     record[record.length] = {key : 'Billable_Qty__c' ,value : 0};\n    if(totalLinePriceField == null || totalLinePriceField == \"\")\n     record[record.length] = {key : 'SVMXC__'+getTotalLinePriceField(record) ,value : 0};\n    calculatedQuantityField.value = '0';\n    totalLinePriceField.value = '0';\n    continue;\n   }\n  }\n }\n\n totalWorkOrderPrice = getOnlyPositiveValue(totalWorkOrderPrice);\n if(pricingRuleInfo){\n  var appliedPricingRule = executePricingRules(pricingRuleInfo, pb, wo);\n  var woTotal = getItemForDetailRecordKey('Proforma_Invoice_Amount__c', woContext);\n  if(woTotal == null || woTotal == '' ){\n   woTotal = woContext[woContext.length] = {key : 'SVMXC__Proforma_Invoice_Amount__c' ,value : 0, value1 : 0};\n  }\n  if(appliedPricingRule && appliedPricingRule[getFieldAPI(\"Rate__c\")]){\n   var unit = appliedPricingRule[getQualifiedFieldName(\"Rate_Type__c\")];\n   if(unit == \"NTE\"){\n    if(appliedPricingRule[getFieldAPI(\"Rate__c\")] < totalWorkOrderPrice)\n     woTotal.value = appliedPricingRule[getFieldAPI(\"Rate__c\")];\n    else\n     woTotal.value = totalWorkOrderPrice;\n   }\n   else if(unit == \"Minimum\"){\n    if(appliedPricingRule[getFieldAPI(\"Rate__c\")] > totalWorkOrderPrice)\n     woTotal.value = appliedPricingRule[getFieldAPI(\"Rate__c\")];\n    else\n     woTotal.value = totalWorkOrderPrice;\n   }\n   else if(unit == \"Surcharge\"){\n    woTotal.value = totalWorkOrderPrice + appliedPricingRule[getFieldAPI(\"Rate__c\")];\n   }\n  }\n  else{\n   woTotal.value = totalWorkOrderPrice;\n  }\n }\n else{\n  var woTotal = getItemForDetailRecordKey('Proforma_Invoice_Amount__c', woContext);\n  if(woTotal == null || woTotal == '' )\n  {\n   woTotal = woContext[woContext.length] = {key : 'SVMXC__Proforma_Invoice_Amount__c' ,value : 0, value1 : 0};\n  }\n  woTotal.value = totalWorkOrderPrice\n }\n\n return true;\n}\n\n/**\n * Snippet start.\n * @param context the transaction data context. Note that 'context' is a pre-defined variable, defined by the\n *        expression engine. Do not overwrite!\n * @param callback function called back once the price book definition is obtained\n * @return the modified transaction context\n */\n$EXPR.getCasePricingDefinition(context, function(pb){\n try{\n\n  if(!pb){\n   $EXPR.Logger.error(\"Could not get the price book definition!\");\n\n   $RETURN(context);\n  }else{\n\n   if(applyPriceBook(context, pb)){\n\n    $RETURN(context);\n   }\n  }\n }catch(e){\n\n  $EXPR.Logger.error(\"There was an error while performing get price => \" + e);\n\n  $RETURN(context);\n }\n});})();"
              },
              "actionType": "JAVASCRIPT"
            }
          ]
        },
        {
          "type": "Section",
          "sequence": 1,
          "referenceId": "a0cf60000003qGKAAY",
          "name": "Case",
          "hideSectionTitle": false,
          "elements": [
            {
              "type": "PICKLIST",
              "sequence": 1,
              "row": 1,
              "required": true,
              "readOnly": false,
              "overrideLookupContext": false,
              "lookupConfiguration": {},
              "isRichTextOnWeb": false,
              "events": [],
              "eltType": "Field",
              "column": 1,
              "apiName": "Status",
              "allowNew": false
            },
            {
              "type": "PICKLIST",
              "sequence": 2,
              "row": 1,
              "required": false,
              "readOnly": false,
              "overrideLookupContext": false,
              "lookupConfiguration": {},
              "isRichTextOnWeb": false,
              "events": [],
              "eltType": "Field",
              "column": 2,
              "apiName": "SVMXC__Billing_Type__c",
              "allowNew": false
            }
          ],
          "columns": 2
        },
        {
          "type": "Detail",
          "sequence": 1,
          "referenceId": "a0df6000000D5pWAAS",
          "objectAlias": "Activity",
          "name": "Activity",
          "childAPIName": "SVMXC__Time_Tracker__c",
          "allowZeroLines": "Allow"
        }
      ],
      "objectAPIName": "Case"
    },
    "objectAPIName": "Case",
    "name": "Add/Edit Time",
    "lines": [
      {
        "sequence": 1,
        "referenceId": "a0df6000000D5pWAAS",
        "objectAlias": "Activity",
        "name": "Activity",
        "hideEmptySection": false,
        "events": [],
        "elements": [
          {
            "type": "PICKLIST",
            "sequence": 1,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 1,
            "apiName": "SVMXC__Activity_Type__c",
            "allowNew": false
          },
          {
            "type": "DATETIME",
            "sequence": 2,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 2,
            "apiName": "SVMXC__Start_Date_and_Time__c",
            "allowNew": false
          },
          {
            "type": "DATETIME",
            "sequence": 3,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 3,
            "apiName": "SVMXC__End_Date_and_Time__c",
            "allowNew": false
          },
          {
            "type": "DOUBLE",
            "sequence": 4,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 4,
            "apiName": "SVMXC__Line_Qty__c",
            "allowNew": false
          },
          {
            "type": "CURRENCY",
            "sequence": 5,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 5,
            "apiName": "SVMXC__Line_Price__c",
            "allowNew": false
          },
          {
            "type": "PERCENT",
            "sequence": 6,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 6,
            "apiName": "SVMXC__Covered__c",
            "allowNew": false
          },
          {
            "type": "TEXTAREA",
            "sequence": 7,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 7,
            "apiName": "SVMXC__Description__c",
            "allowNew": false
          },
          {
            "type": "DOUBLE",
            "sequence": 8,
            "row": 0,
            "required": false,
            "readOnly": true,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 8,
            "apiName": "SVMXC__Billable_Qty__c",
            "allowNew": false
          },
          {
            "type": "BOOLEAN",
            "sequence": 9,
            "row": 0,
            "required": false,
            "readOnly": false,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 9,
            "apiName": "SVMXC__Is_Billable__c",
            "allowNew": false
          },
          {
            "type": "CURRENCY",
            "sequence": 10,
            "row": 0,
            "required": false,
            "readOnly": true,
            "overrideLookupContext": false,
            "lookupConfiguration": {},
            "isRichTextOnWeb": false,
            "events": [],
            "eltType": "Field",
            "column": 10,
            "apiName": "SVMXC__Billable_Line_Price__c",
            "allowNew": false
          }
        ],
        "childAPIName": "SVMXC__Time_Tracker__c",
        "allowZeroLines": "Allow",
        "allowNew": true,
        "allowDelete": true,
        "allowClone": true
      }
    ],
    "isStandard": false,
    "includeSummary": false,
    "includeEventTimePlace": false,
    "includeContact": false,
    "hideSave": false,
    "hideQuickSave": false,
    "helpUrl": "http://userdocs.servicemax.com:8080/ServiceMaxHelp/Spring13/en_us/svmx_redirector.htm?uid=",
    "events": [
      {
        "type": "Before Save/Update",
        "codeSnippetDetail": {
          "type": "JavaScript",
          "snippetId": "Code005",
          "name": "Case GetPrice",
          "id": "a1tf6000000Dd67AAC",
          "description": "Case GetPrice",
          "data": "(function(){var tag = new Object();\n\ntag['TAG004'] = 'Activity is covered by contract.';\ntag['TAG005'] = 'Activity is not covered by contract.';\ntag['TAG006'] = 'Activity is covered by warranty';\ntag['TAG017'] = 'Labor Price defined in contract.';\ntag['TAG018'] = 'Labor Price defined in contract price book.';\ntag['TAG019'] = 'Labor Price defined in standard price book.';\ntag['TAG025'] = 'No activity price found for ';\ntag['TAG026'] = 'No warranty found.';\ntag['TAG027'] = 'No service offering found.';\ntag['TAG028'] = 'A special price is available for ';\nvar recordTypeName = new Object();\nvar totalWorkOrderPrice = 0;\n\nfunction getQuantityField(record)\n{\n return 'Line_Qty__c';\n}\nfunction getUnitPriceField(record)\n{\n return 'Line_Price__c';\n}\n\nfunction getTotalLinePriceField(record)\n{\n return 'Billable_Line_Price__c';\n}\n\n/*///////////////////////////////////////////////// START - LABOR FUNCTIONS //////////////////////////////////////////*/\nfunction processLaborLine( record, pb, recordType, params){\n var linePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n var activityType = getItemForDetailRecordKey(\"Activity_Type__c\", record);\n var coverageField = getItemForDetailRecordKey(\"Covered__c\", record);\n\n var up = getUnitPriceForLabor(activityType, pb, recordType, record);\n var unitType = getItemForDetailRecordKey(\"Applied_Rate_Type__c\", record);\n\n if(up.tag != null){\n  coverageField.value = 0;\n  var appliedCoverage = applyServiceOffering(coverageField, params.so, \"Labor_Discount_Covered__c\", \"Labor_Discount_Not_Covered__c\");\n  if(!appliedCoverage.applied){\n   if(applyWarranty(coverageField, params.warranty, \"Time_Covered__c\"))\n    addLogWorkOrderLine(params.logField, tag['TAG006']);\n  }\n  else{\n   appliedCoverage.isCovered == true ? addLogWorkOrderLine(params.logField, tag['TAG004']) : addLogWorkOrderLine(params.logField, tag['TAG005']);\n  }\n  addLogWorkOrderLine(params.logField, tag[up.tag]);\n  up = up.value;\n  var rateType = up.rateType, rate = 0, duration, estimateDuration;\n  var regularRate = up.regularRate;\n  if(!up.regularRate) regularRate = 0;\n  var laborRoundingType;\n  var laborToRoundNearest;\n  var scMinimumLabor;\n  if(rateType == \"Per Hour\"){\n   var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n   if(contractDefinitionInfo){\n    contractDefinition = contractDefinitionInfo.data[0];\n    laborRoundingType = contractDefinition[getQualifiedFieldName(\"Labor_Rounding_Type__c\")];\n    laborToRoundNearest = contractDefinition[getQualifiedFieldName(\"Round_Labor_To_Nearest__c\")];\n    scMinimumLabor = contractDefinition[getQualifiedFieldName(\"Minimum_Labor__c\")];\n   }\n   var minDuration = up.minimumUnit ? up.minimumUnit : scMinimumLabor;\n   estimateDuration = getDuration(record,true);\n\n   if(estimateDuration < 0){\n    estimateDuration = params.quantity * 60;\n   }\n\n   if(laborRoundingType && laborToRoundNearest)\n   {\n    estimateDuration = getRounded(laborRoundingType,laborToRoundNearest,estimateDuration);\n   }\n   estimateDuration = estimateDuration;\n   duration = (minDuration > estimateDuration) ? minDuration  : estimateDuration;\n   duration = (duration / 60).toFixed(3);\n   rate = duration * (regularRate );\n   params.calculatedQuantityField.value = duration;\n  }else{\n   /* Flat rate*/\n   rate = regularRate;\n   params.calculatedQuantityField.value = 1;\n  }\n\n  unitPriceField.value = regularRate;\n  var totalLinePrice = getBillableLinePrice(rate, null, coverageField);\n  linePriceField.value = totalLinePrice;\n  if(params.isBillable)\n   totalWorkOrderPrice += parseFloat(totalLinePrice);\n  unitType.value = rateType;\n }\n else{\n  linePriceField.value = 0;\n  unitPriceField.value = 0;\n  coverageField.value = 0;\n  params.calculatedQuantityField.value = 0;\n  $EXPR.Logger.warn(tag['TAG025'] + activityType.value);\n  return;\n }\n}\n\nfunction getUnitPriceForLabor(activityType, pb, recordType, record){\n var ret = new Object(), pbKey = null;\n ret.value = null;\n ret.tag = null;\n\n /* Check if a special pricing is available as part of service contract */\n ret.value  = getUnitPriceFromLaborSpecialPricing(activityType, pb, record);\n if(ret.value  != null) ret.tag = 'TAG017';\n if(ret.value  == null){\n\n  /* Check if a service contract exists. Assumption is that if no contract is available, then this item will NOT be available */\n  var recordTypeInfo = getFromPriceBookDefinition(pb, \"RECORDTYPEINFO_ACTIVITY_CONTRACT\");\n  if(recordTypeInfo){\n   pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo);\n\n   if(pbKey){\n    ret.value  = getUnitPriceFromLaborPricing(pbKey, pb, activityType, record);\n    if(ret.value  != null) ret.tag = 'TAG018';\n   }\n  }\n }\n\n\n /* Get the price book corresponding to record type and do the basic calculation */\n if(ret.value  == null){\n  ret.value  = getBasicUnitPriceForLabor(activityType, pb, recordType, record);\n  if(ret.value  != null) ret.tag = 'TAG019';\n }\n\n return ret;\n}\n\nfunction getBasicUnitPriceForLabor(activityType, pb, recordType, record){\n var recordTypeInfo = getFromPriceBookDefinition(pb, \"RECORDTYPEINFO_ACTIVITY\"), ret = null, pbKey = null;\n if(recordTypeInfo){\n  pbKey = getPriceBookIdForRecordType(recordType, recordTypeInfo);\n }\n\n if(pbKey){\n  ret = getUnitPriceFromLaborPricing(pbKey, pb, activityType, record);\n }\n return ret;\n}\n\nfunction getUnitPriceFromLaborSpecialPricing(activityType, pb, record){\n var specialPricing = getFromPriceBookDefinition(pb, \"CONTRACT_SPECIALACTIVITYPRICING\");\n var ret = null;\n if(specialPricing){\n  var allSpecialPricing = specialPricing.data, l = allSpecialPricing.length, i, defaultPricing;\n  for(i = 0; i < l; i++){\n   var pricing = allSpecialPricing[i];\n   if( pricing[getQualifiedFieldName(\"Activity_Type__c\")] == activityType.value){\n\n    ret = extractLaborPricing(pricing, record, pb, \"Minimum_Labor__c\");\n    if(ret){\n     defaultPricing = ret;\n     if(ret.found) break;\n    }else{\n     ret = defaultPricing;\n    }\n   }\n  }\n }\n\n if(ret) $EXPR.Logger.info(tag['TAG028'] + activityType.value);\n\n return ret;\n}\n\nfunction getUnitPriceFromLaborPricing(pbKey, pb, activityType, record){\n\n var laborPricingInfo = getFromPriceBookDefinition(pb, \"ACTIVITYPRICING\"), ret = null;\n if(laborPricingInfo){\n /* Get the price book corresponding to the product type */\n  var allLaborPricingInfo = laborPricingInfo.data, l = allLaborPricingInfo.length, i, defaultPricing;\n  for(i = 0; i < l; i++){\n   var pricing = allLaborPricingInfo[i];\n   if(pbKey == pricing[getQualifiedFieldName(\"Price_Book__c\")]\n     && pricing[getQualifiedFieldName(\"Activity_Type__c\")] == activityType.value){\n\n    ret = extractLaborPricing(pricing, record, pb);\n    if(ret){\n     defaultPricing = ret;\n     if(ret.found) break;\n    }else{\n     ret = defaultPricing;\n    }\n   }\n  }\n }\n\n return ret;\n}\n\nfunction extractLaborPricing(pricing, record, pb, minLaborField){\n\n var isAssociatedWithProduct = !!pricing[getQualifiedFieldName(\"Activity_Product__c\")], ret = null;\n var product = getItemForDetailRecordKey(\"Product__c\", record);\n if(!product || !product.value || product.value == \"\") product = woProduct;\n if(isAssociatedWithProduct && product && product.value && product.value != \"\"){\n  var prodDefinition = getProductDefinition(pb, product), bfound = false;\n  if(!prodDefinition) return;\n  if((get15CharId(pricing[getQualifiedFieldName(\"Product__c\")]) == get15CharId(product.value))){\n   bfound = true;\n  }else if(prodDefinition[getQualifiedFieldName(\"Product_Line__c\")] && pricing[getQualifiedFieldName(\"Product_Line__c\")] == prodDefinition[getQualifiedFieldName(\"Product_Line__c\")]){\n   bfound = true;\n  }else if(prodDefinition[\"Family\"] && pricing[getQualifiedFieldName(\"Product_Family__c\")] == prodDefinition[\"Family\"]){\n   bfound = true;\n  }\n  if(bfound){\n   ret = {\n     rateType    : pricing[getQualifiedFieldName(\"Unit__c\")],\n     regularRate : pricing[getQualifiedFieldName(\"Regular_Rate__c\")],\n     minimumUnit : minLaborField != null ? pricing[getQualifiedFieldName(minLaborField)] : null,\n     found : true\n   };\n  }\n }else{\n  ret = {\n    rateType    : pricing[getQualifiedFieldName(\"Unit__c\")],\n    regularRate : pricing[getQualifiedFieldName(\"Regular_Rate__c\")],\n    minimumUnit : minLaborField != null ? pricing[getQualifiedFieldName(minLaborField)] : null,\n  };\n  if(!product) ret.found = true;\n }\n return ret;\n}\n\n/*///////////////////////////////////////////////// END - LABOR FUNCTIONS ////////////////////////////////////////////*/\n\nfunction getDuration(lineItem, inMinutes){\n var startDateTime = null, endDateTime = null;\n var startDate = getItemForDetailRecordKey(\"Start_Date_and_Time__c\", lineItem);\n var endDate = getItemForDetailRecordKey(\"End_Date_and_Time__c\", lineItem);\n var duration = -1;\n\n if(startDate == null || startDate.value == null || startDate.value == \"\"\n  || endDate == null || endDate.value == null || endDate.value == \"\"){\n  duration = -1;\n }else{\n\n  /* Calculate time */\n  startDateTime = getDateFromString(startDate.value);\n  endDateTime = getDateFromString(endDate.value);\n  var diff = (endDateTime - startDateTime) / (1000.0 * 60.0);\n\n  if(!inMinutes){\n   diff /= 60.0;\n   /* Assumed to be in hours */\n   diff = Math.ceil(diff);\n  }\n  if(diff > 0){\n   duration = Math.round(diff*100)/100 ;\n  }\n }\n return duration;\n}\n\nfunction applyWarranty(coverageField, warranty, wField){\n if(warranty){\n  var coverage = warranty[getQualifiedFieldName(wField)];\n  coverageField.value =  getOnlyPositiveValue(coverage);\n  return true;\n }\n else {\n  $EXPR.Logger.info(tag['TAG026']);\n    }\n}\n\nfunction applyServiceOffering(coverageField, so, coveredField, notCoveredField){\n var response = new Object(), coverage = null, fld = null;\n response.isCovered = false;\n response.applied = false;\n if(so){\n  if(so.isCovered){\n   fld = coveredField;\n   response.isCovered = true;\n  }else{\n   fld = notCoveredField;\n  }\n\n  coverage = so[getQualifiedFieldName(fld)];\n  coverageField.value = getOnlyPositiveValue(coverage);\n  response.applied = true;\n }else {\n  $EXPR.Logger.info(tag['TAG027']);\n    }\n\n return response;\n}\n\nfunction addLogWorkOrderLine(logField, logMessage){\n logField.value += logMessage + '';\n $EXPR.Logger.info(logMessage);\n}\n\nfunction getOnlyPositiveValue(value){\n if(value == null || value < 0) {\n  return 0;\n    }\n else {\n  return value;\n    }\n}\n\nfunction getPriceBookIdForRecordType(recordType, recordTypeInfo){\n var rtype2PriceBookMap = recordTypeInfo.valueMap, l = rtype2PriceBookMap.length, i, pbKey = null;\n for(i = 0; i < l; i++){\n  var rtype2PriceBook = rtype2PriceBookMap[i];\n  if(rtype2PriceBook.key == recordType.value){\n   pbKey = rtype2PriceBook.value;\n   break;\n  }\n }\n return pbKey;\n}\n\nfunction getFromPriceBookDefinition(pb, key){\n var i, l = pb.length, ret = null;\n for(i = 0; i < l; i++){\n  if(pb[i].key == key){\n   ret = pb[i];\n   break;\n  }\n }\n return ret;\n}\n\nfunction getWarrantyDefinition(pb){\n var wDef = getFromPriceBookDefinition(pb, \"WARRANTYDEFINITION\"), ret = null;\n if(wDef) ret = wDef.data[0];\n\n return ret;\n}\n\nfunction getServiceOffering(pb){\n var so = getFromPriceBookDefinition(pb, \"CONTRACT_SERVICEOFFERING\"), ret = null;\n if(so) {\n  ret = so.data[0];\n  ret.isCovered = (so.value == \"COVERED\") ? true : false;\n }\n return ret;\n}\n\nfunction getItemForDetailRecordKey(key, record){\n\n\n key = getFieldAPI(key);\n\n var length = record.length, k, ret = \"\";\n for(k = 0; k < length; k++){\n  var fld = record[k];\n  if(fld.key == key){\n   ret = fld;\n   break;\n  }\n }\n return ret;\n}\n\nfunction getFieldAPI(key)\n{\n if(key.indexOf(\"__c\", key.length - \"__c\".length) !== -1){\n  key = $EXPR.getOrgNamespace() + \"__\" + key;\n }\n return key;\n}\n\nfunction getQualifiedFieldName(name){\n return $EXPR.getOrgNamespace() + \"__\" + name;\n}\n\nfunction getDateFromString(dateStr){\n var dt = dateStr.split(\" \");\n var date = dt[0].split(\"-\");\n var time = dt[1].split(\":\");\n return new Date(parseInt(date[0], 10), parseInt(date[1], 10), parseInt(date[2], 10),\n   parseInt(time[0], 10), parseInt(time[1], 10), parseInt(time[2], 10));\n}\n\n\n/* Hack to get around mixed ID lengths */\nfunction get15CharId(id){\n if(id && id.length == 18) {\n  id = id.substring(0, 15);\n    }\n\n return id;\n}\n\nfunction formatAdvancedExpression(){\n if(arguments.length == 0 ) { return \"\";}\n\n var formatted = arguments[0];\n\n    for (var i = 0; i < arguments[1].length; i++) {\n     formatted = formatted.split( \"\" + (i+1) ).join(arguments[1][i]);\n    }\n    return formatted;\n}\n\nfunction getProductDefinition(pb, product){\n var prodDefinitionInfo = getFromPriceBookDefinition(pb, \"PRODUCT_DEFINITION\"), ret = null;\n if(prodDefinitionInfo){\n  var allProdDefinitionInfo = prodDefinitionInfo.data, i, l = allProdDefinitionInfo.length;\n  for(i = 0; i < l; i++){\n   if(allProdDefinitionInfo[i].Id == product.value){\n    ret = allProdDefinitionInfo[i];\n    break;\n   }\n  }\n }\n return ret;\n}\n\nfunction executeExpression(expression, wo){\n\n var expressionLines = expression.data, j, elength = expressionLines.length, exp = [], input = [];\n expressionLines = $SORT(expressionLines,getQualifiedFieldName(\"Sequence__c\"));\n for(j = 0; j < elength; j++){\n  var expressionLine = expressionLines[j];\n  var field = expressionLine[getQualifiedFieldName(\"Field_Name__c\")];\n  var operator = expressionLine[getQualifiedFieldName(\"Operator__c\")];\n  var operand = expressionLine[getQualifiedFieldName(\"Operand__c\")];\n\n  input[j] = {field : field, value : operand};\n  if(operator == \"starts\"){\n   exp[j] = $FORMAT(\"$STARTS_WITH({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"contains\"){\n   exp[j] = $FORMAT(\"$CONTAINS({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"eq\"){\n   exp[j] = $FORMAT(\"$EQUALS({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"ne\"){\n   exp[j] = $FORMAT(\"$NOT_EQUALS({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"gt\"){\n   exp[j] = $FORMAT(\"$GREATER_THAN({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"ge\"){\n   exp[j] = $FORMAT(\"$GREATER_THAN_OR_EQUAL_TO({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"lt\"){\n   exp[j] = $FORMAT(\"$LESS_THAN({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"le\"){\n   exp[j] = $FORMAT(\"$LESS_THAN_OR_EQUAL_TO({0})\", \"input[\" + j + \"]\");\n  }else if(operator == \"isnotnull\"){\n   exp[j] = $FORMAT(\"$IS_NOT_NULL({0})\", \"input[\" + j + \"]\");\n  }\n }\n\n var advancedExpression = expression.value;\n if(!advancedExpression || advancedExpression == null){\n  advancedExpression = \"( \";\n  for(k = 0; k < exp.length; k++){\n   advancedExpression += (k+1) + \" AND \";\n  }\n\n\n  /* Remove the last AND */\n  advancedExpression = advancedExpression.substring(0, advancedExpression.length - 4);\n  advancedExpression += \" )\";\n }\n\n\n /* Replace apex conditional operators with JS operators */\n advancedExpression = advancedExpression.toUpperCase();\n advancedExpression = advancedExpression.split(\"AND\").join(\"&&\").split(\"OR\").join(\"||\");\n var jsExpression = formatAdvancedExpression(advancedExpression, exp);\n\n\n /* Evaluate the expression */\n var result = true;\n (function(jsExpression, wo){\n\n  function $EQUALS(ip){\n     if(wo[ip.field] == ip.value) {\n    return true;\n     }\n     else {\n    return false;\n     }\n  }\n\n  function $STARTS_WITH(ip){\n   var field = wo[ip.field];\n   if(!field) field = \"\";\n\n   return field.indexOf(ip.value) == 0;\n  }\n\n  function $CONTAINS(ip){\n   var field = wo[ip.field];\n   if(!field) field = \"\";\n\n   return field.indexOf(ip.value) != -1;\n  }\n\n\n  function $NOT_EQUALS(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field != value);\n  }\n\n  function $GREATER_THAN(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field > value);\n  }\n\n  function $GREATER_THAN_OR_EQUAL_TO(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field >= value);\n  }\n\n  function $LESS_THAN(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field < value);\n  }\n\n  function $LESS_THAN(ip){\n   var field = wo[ip.field], value = ip.value;\n   if(!field) field = \"\";\n\n   value = convertTargetToSourceType(field, value);\n   return (field <= value);\n  }\n\n  function $IS_NOT_NULL(ip){\n   var field = wo[ip.field];\n   return !!field;\n  }\n\n  function convertTargetToSourceType(source, target){\n   var ret = target, sourceType = typeof(source);\n   if(sourceType == 'string') ret = \"\" + ret;\n   else if(sourceType == 'boolean') ret = !!ret;\n   else if(sourceType == 'number') ret = parseInt(ret, 10);\n\n   return ret;\n  }\n  result = eval(jsExpression);\n })(jsExpression, wo);\n\n return result;\n}\n\nfunction getExpression(expressionId, pb){\n var ret = null;\n if(expressionId){\n  var expressionsInfo = getFromPriceBookDefinition(pb, \"RULES\"), allExpressions = expressionsInfo.valueMap, l = allExpressions.length, i;\n  for(i = 0; i < l; i++){\n   var expression = allExpressions[i];\n   if(get15CharId(expression.key) == get15CharId(expressionId)){\n    ret = expression;\n    break;\n   }\n  }\n }\n return ret;\n}\n\nfunction getMasterCase(context, pb){\n var workOrder = getFromPriceBookDefinition(pb, \"CASE_DATA\").data[0];\n\n var woFromTransaction = context.headerRecord.records[0].targetRecordAsKeyValue;\n\n var lookupDef = getFromPriceBookDefinition(pb, \"LOOKUP_DEFINITION\").valueMap;\n\n var wo = mergeWO(workOrder, woFromTransaction, lookupDef);\n return wo;\n}\n\nfunction mergeWO(workOrder, woFromTransaction, lookupDef){\n /* Reference fields */\n var i, l = lookupDef.length;\n for(i = 0; i < l; i++){\n  var def = lookupDef[i];\n  workOrder[def.key] = def.value;\n }\n\n\n /* Merge transaction into wo data from server */\n l = woFromTransaction.length;\n for(i = 0; i < l; i++){\n  var value = woFromTransaction[i].value1;\n  if(!value) { value = woFromTransaction[i].value;}\n\n  workOrder[woFromTransaction[i].key] = value;\n }\n\n return workOrder;\n}\n\nfunction getRounded(roundType,mins,actuals){\n var roundingMins = actuals % 60;\n var remainingMins = actuals - (actuals % 60);\n var intMins = parseInt(mins);\n if(roundType == 'Round Up') {\n  if(intMins != 60 && (Math.ceil(roundingMins/intMins) * intMins) != 60)\n   return (remainingMins + (Math.ceil(roundingMins/intMins) * intMins % 60));\n  else\n   return (remainingMins + (Math.ceil(roundingMins/intMins) * intMins));\n }else if(roundType == 'Round Down') {\n  if(intMins != 60 && (Math.floor(roundingMins/intMins) * intMins) != 60)\n   return (remainingMins + (Math.floor(roundingMins/intMins) * intMins % 60));\n  else\n   return (remainingMins + (Math.floor(roundingMins/intMins) * intMins));\n }\n return actuals;\n}\n/*///////////////////////////////////////////////// END - UTILITY FUNCTIONS ////////////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - PRICING RULE FUNCTIONS /////////////////////////////////*/\nfunction getPricingRuleInfo(pb){\n var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\"), ret  = null, pricingRuleInfo = null;\n if(contractDefinitionInfo){\n  pricingRuleInfo = getFromPriceBookDefinition(pb, \"CONTRACT_PRICINGRULES\");\n  if(pricingRuleInfo && pricingRuleInfo.data.length > 0){\n   ret = pricingRuleInfo.data;\n  }\n }\n return ret;\n}\n\nfunction executePricingRules(pricingRuleInfo, pb, wo){\n var i, l = pricingRuleInfo.length, appliedPricingRule = null;\n for(i = 0; i < l; i++){\n  var pricingRule = pricingRuleInfo[i];\n  var expressionId = pricingRule[getQualifiedFieldName(\"Named_Expression__c\")];\n  var expression = getExpression(expressionId, pb);\n  if(!expression){\n   appliedPricingRule = pricingRule;\n   break;\n  }else{\n   var result = executeExpression(expression, wo);\n\n   if(result == true){\n    appliedPricingRule = pricingRule;\n    break;\n   }\n  }\n }\n return appliedPricingRule;\n}\n/*///////////////////////////////////////////////// END - PRICING RULE FUNCTIONS ///////////////////////////////////*/\n\n/*///////////////////////////////////////////////// START - UTILITY TO FIND TOTAL LINE PRICE ///////////////////////*/\nfunction getBillableLinePrice(totalLinePrice, discountField, coverageField)\n{\n var discount = 0;\n var response = 0;\n if(totalLinePrice != null)\n {\n  if(discountField != null && discountField.value != null && discountField.value > 0)\n   discount= (totalLinePrice * discountField.value / 100);\n  var coverage = 0;\n  totalLinePrice = totalLinePrice - discount;\n  if(coverageField != null && coverageField.value != null && coverageField.value > 0)\n   coverage = (totalLinePrice * coverageField.value / 100);\n\n  response = (totalLinePrice - coverage).toFixed(3);\n }\n return getOnlyPositiveValue(response);\n}\n/*///////////////////////////////////////////////// END - UTILITY TO FIND TOTAL LINE PRICE /////////////////////////*/\n\n/*///////////////////////////////////////////////// START - UTILITY TO UPDATE WORKORDER FUNCTIONS //////////////////*/\nfunction updateTransactionWORateInfo(context, rateSource, rateTarget, unitSource, unitTarget, rateInfo){\n var rateApplied = false, unitApplied = false, woFromTransaction = context.headerRecord.records[0].targetRecordAsKeyValue;\n for(var m = 0;  (m < woFromTransaction.length) && (rateApplied == false || unitApplied == false); m++){\n  if(woFromTransaction[m].key == getQualifiedFieldName(rateTarget)){\n   woFromTransaction[m].value = rateInfo[getQualifiedFieldName(rateSource)];\n   woFromTransaction[m].value1 = rateInfo[getQualifiedFieldName(rateSource)];\n   rateApplied = true;\n  }else if(woFromTransaction[m].key == getQualifiedFieldName(unitTarget)){\n   woFromTransaction[m].value = rateInfo[getQualifiedFieldName(unitSource)];\n   woFromTransaction[m].value1 = rateInfo[getQualifiedFieldName(unitSource)];\n   unitApplied = true;\n  }\n }\n if(!rateApplied){\n  woFromTransaction[woFromTransaction.length] = {key : getQualifiedFieldName(rateTarget),\n  value : rateInfo[getQualifiedFieldName(rateSource)], value1 : rateInfo[getQualifiedFieldName(rateSource)]};\n }\n if(!unitApplied){\n  woFromTransaction[woFromTransaction.length] = {key : getQualifiedFieldName(unitTarget),\n  value : rateInfo[getQualifiedFieldName(unitSource)], value1 : rateInfo[getQualifiedFieldName(unitSource)]};\n }\n}\n\nfunction tagHandler(pb){\n var tagDefinition = getFromPriceBookDefinition(pb, \"TAGS\");\n if(tagDefinition.valueMap != null){\n  var l = tagDefinition.valueMap.length;\n  for(i = 0; i < l; i++){\n   var tagDef = tagDefinition.valueMap[i];\n   tag[tagDef.key] = tagDef.value;\n  }\n }\n}\n\n/*///////////////////////////////////////////////// END - UTILITY TO UPDATE WORKORDER FUNCTIONS ///////////////////*/\nfunction applyPriceBook(context, pb){\n\n /* Load all tags */\n    tagHandler(pb);\n /* Check if entitlement has been performed\n var isEntitlementPerfromed = getItemForDetailRecordKey('Is_Entitlement_Performed__c', context.headerRecord.records[0].targetRecordAsKeyValue);\n\n if(isEntitlementPerfromed.value == null || isEntitlementPerfromed.value == 'false' || isEntitlementPerfromed.value == false)\n {\n  $EXPR.Logger.error(tag['EVER005_TAG087']);\n\n  if($EXPR.showMessage){\n   $EXPR.showMessage({\n    text : tag['EVER005_TAG087'],\n    type : 'WARN',\n    buttons :  ['OK'],\n    handler : function(evt){\n     $RETURN(context);\n    }\n   });\n   return false;\n  }else{\n   alert(tag['EVER005_TAG087']);\n   return true;\n  }\n }else{*/\n\n  return continueApplyPriceBook(context, pb);\n //}\n}\nfunction showAlert(data){\n     alert(JSON.stringify((data)));\n}\nfunction continueApplyPriceBook(context, pb){\n /* Check whether the work order has a tarvel policy */\n processWorkOrderLines = true;\n\n var contractDefinitionInfo = getFromPriceBookDefinition(pb, \"CONTRACT_DEFINITION\");\n\n /* Check whether the work order has a pricing rule */\n var pricingRuleInfo = getPricingRuleInfo(pb);\n\n\n var wo = getMasterCase(context, pb);\n\n var woContext = context.headerRecord.records[0].targetRecordAsKeyValue;\n\n if(pricingRuleInfo){\n  var appliedPricingRule = executePricingRules(pricingRuleInfo, pb, wo);\n  if(wo.SVMXC__Proforma_Invoice_Amount__c == null)\n   wo.SVMXC__Proforma_Invoice_Amount__c = 0;\n  var woTotal = getItemForDetailRecordKey('Proforma_Invoice_Amount__c', woContext);\n  if(woTotal == null | woTotal == '' )\n  {\n   woContext[woContext.length] = {key : 'SVMXC__Proforma_Invoice_Amount__c' ,value : 0, value1 : 0};\n   woTotal = woContext[woContext.length];\n  }\n  if(appliedPricingRule){\n   updateTransactionWORateInfo(context, \"Rate__c\", \"Rate_Pricing_Rule__c\", \"Rate_Type__c\", \"Rate_Type_Pricing_Rule__c\", appliedPricingRule);\n\n   var unit = appliedPricingRule[getQualifiedFieldName(\"Rate_Type__c\")];\n   if(unit == \"Fixed\"){\n    woTotal.value = appliedPricingRule[getFieldAPI(\"Rate__c\")];\n    processWorkOrderLines = false;\n   }\n  }\n }\n else{\n  var appliedPricingRule = {SVMXC__Rate_Type__c: \"\", SVMXC__Rate__c: 0};\n  updateTransactionWORateInfo(context, \"Rate__c\", \"Rate_Pricing_Rule__c\", \"Rate_Type__c\", \"Rate_Type_Pricing_Rule__c\", appliedPricingRule);\n\n }\n\n if(!processWorkOrderLines) return true;\n\n /*var recordTypeInfo = getFromPriceBookDefinition(pb, \"RECORDTYPEDEFINITION\");\n\n var i, l = recordTypeInfo.valueMap.length;\n for(var i = 0; i < l; i++){\n  var recordType = recordTypeInfo.valueMap[i];\n  recordTypeName[recordType.value] = recordType.key;\n }*/\n\n woProduct = getItemForDetailRecordKey(\"Product__c\", context.headerRecord.records[0].targetRecordAsKeyValue);\n\n detailRecords = context.detailRecords, l = detailRecords.length;\n var warranty = getWarrantyDefinition(pb);\n var so = getServiceOffering(pb);\n for(var i = 0; i < l; i++){\n  var records = detailRecords[i].records, j, recordslength = records.length;\n  for(j = 0; j < recordslength; j++){\n   var record = records[j].targetRecordAsKeyValue, length = record.length, k;\n   if(getQuantityField(record) == null) continue;\n   /* Do not process if the line item has this value set to true */\n   var usePriceBook = getItemForDetailRecordKey(\"Calculate_Price__c\", record);\n   var isBillable = getItemForDetailRecordKey(\"Is_Billable__c\", record);\n   if(!isBillable || !isBillable.value || isBillable.value == 'false' || isBillable.value == false){\n    isBillable = false;\n   }\n   else{\n    isBillable = true;\n   }\n   /* Calculate the quantity */\n   var quantityField = getItemForDetailRecordKey(getQuantityField(record), record);\n   var calculatedQuantityField = getItemForDetailRecordKey('Billable_Qty__c', record);\n   var totalLinePriceField = getItemForDetailRecordKey(getTotalLinePriceField(record), record);\n   var quantity = 0;\n   try{\n    quantity = parseFloat(quantityField.value);\n    if( isNaN(quantity) ) quantity = 0;\n   } catch(e){ }\n   /*end quantity*/\n\n   if(usePriceBook != \"\" && (usePriceBook.value != \"true\" && usePriceBook.value != true))\n   {\n    var unitPriceField = getItemForDetailRecordKey(getUnitPriceField(record), record);\n    var totalLinePrice = 0;\n    if(unitPriceField.value)\n     totalLinePrice = parseInt(unitPriceField.value) * quantity;\n    totalWorkOrderPrice += totalLinePrice;\n    calculatedQuantityField.value = quantity;\n    totalLinePriceField.value = totalLinePrice;\n    continue;\n   }\n\n   var lineType = getItemForDetailRecordKey(\"Type__c\", record);\n   //var recordType = getItemForDetailRecordKey(\"RecordTypeId\", record);\n\n   var logField = getItemForDetailRecordKey('Billing_Information__c', record);\n   logField.value = '';\n   var recordTypeValue = {};\n   recordTypeValue.value = \"MASTER\";\n   if (lineType.value == \"Activity\"){\n    processLaborLine(record, pb, recordTypeValue, {quantity : quantity, warranty : warranty, quantityField : quantityField, so : so, calculatedQuantityField: calculatedQuantityField, logField : logField, isBillable: isBillable});\n   }\n\n   if(!isBillable){\n    if(calculatedQuantityField == null || calculatedQuantityField == \"\")\n     record[record.length] = {key : 'Billable_Qty__c' ,value : 0};\n    if(totalLinePriceField == null || totalLinePriceField == \"\")\n     record[record.length] = {key : 'SVMXC__'+getTotalLinePriceField(record) ,value : 0};\n    calculatedQuantityField.value = '0';\n    totalLinePriceField.value = '0';\n    continue;\n   }\n  }\n }\n\n totalWorkOrderPrice = getOnlyPositiveValue(totalWorkOrderPrice);\n if(pricingRuleInfo){\n  var appliedPricingRule = executePricingRules(pricingRuleInfo, pb, wo);\n  var woTotal = getItemForDetailRecordKey('Proforma_Invoice_Amount__c', woContext);\n  if(woTotal == null || woTotal == '' ){\n   woTotal = woContext[woContext.length] = {key : 'SVMXC__Proforma_Invoice_Amount__c' ,value : 0, value1 : 0};\n  }\n  if(appliedPricingRule && appliedPricingRule[getFieldAPI(\"Rate__c\")]){\n   var unit = appliedPricingRule[getQualifiedFieldName(\"Rate_Type__c\")];\n   if(unit == \"NTE\"){\n    if(appliedPricingRule[getFieldAPI(\"Rate__c\")] < totalWorkOrderPrice)\n     woTotal.value = appliedPricingRule[getFieldAPI(\"Rate__c\")];\n    else\n     woTotal.value = totalWorkOrderPrice;\n   }\n   else if(unit == \"Minimum\"){\n    if(appliedPricingRule[getFieldAPI(\"Rate__c\")] > totalWorkOrderPrice)\n     woTotal.value = appliedPricingRule[getFieldAPI(\"Rate__c\")];\n    else\n     woTotal.value = totalWorkOrderPrice;\n   }\n   else if(unit == \"Surcharge\"){\n    woTotal.value = totalWorkOrderPrice + appliedPricingRule[getFieldAPI(\"Rate__c\")];\n   }\n  }\n  else{\n   woTotal.value = totalWorkOrderPrice;\n  }\n }\n else{\n  var woTotal = getItemForDetailRecordKey('Proforma_Invoice_Amount__c', woContext);\n  if(woTotal == null || woTotal == '' )\n  {\n   woTotal = woContext[woContext.length] = {key : 'SVMXC__Proforma_Invoice_Amount__c' ,value : 0, value1 : 0};\n  }\n  woTotal.value = totalWorkOrderPrice\n }\n\n return true;\n}\n\n/**\n * Snippet start.\n * @param context the transaction data context. Note that 'context' is a pre-defined variable, defined by the\n *        expression engine. Do not overwrite!\n * @param callback function called back once the price book definition is obtained\n * @return the modified transaction context\n */\n$EXPR.getCasePricingDefinition(context, function(pb){\n try{\n\n  if(!pb){\n   $EXPR.Logger.error(\"Could not get the price book definition!\");\n\n   $RETURN(context);\n  }else{\n\n   if(applyPriceBook(context, pb)){\n\n    $RETURN(context);\n   }\n  }\n }catch(e){\n\n  $EXPR.Logger.error(\"There was an error while performing get price => \" + e);\n\n  $RETURN(context);\n }\n});})();"
        },
        "actionType": "JAVASCRIPT"
      }
    ],
    "enableTroubleShooting": false,
    "enableServiceReportView": false,
    "enableServiceReportGeneration": false,
    "dependencyExist": true
  },
  "name": "Add/Edit Time",
  "linkedProcesses": [],
  "isStandard": false,
  "formulas": [],
  "events": [],
  "enableRealTimeValidation": true,
  "developerName": "Create_Case_Time_Tracker_Entry",
  "description": "Create Case Time Tracker Entry",
  "childProcessNodes": [
    {
      "valueMappingName": "SVMXSTD: Create/Edit Activity",
      "valueMappingDeveloperName": "Case_VMap001",
      "type": "TARGETCHILD",
      "sequence": 1,
      "referenceId": "a0Gf6000000EunOEAS",
      "qualificationCriteriaId": "EXPR070",
      "parentColumnAPIName": "SVMXC__Case__c",
      "objectLabel": "Activity",
      "objectAPIName": "SVMXC__Time_Tracker__c",
      "nodeAPIName": "Case",
      "enableOnlineSearch": false,
      "allowImages": false,
      "allowAttachments": false
    }
  ],
  "attachmentEnabled": false
}